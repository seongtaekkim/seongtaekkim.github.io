<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://seongtaekkim.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://seongtaekkim.github.io/" rel="alternate" type="text/html" /><updated>2021-09-27T22:33:08+09:00</updated><id>https://seongtaekkim.github.io/feed.xml</id><title type="html">웹개발자</title><subtitle>IT</subtitle><entry><title type="html">Springframework Bean(2)</title><link href="https://seongtaekkim.github.io/springframework-bean(2)" rel="alternate" type="text/html" title="Springframework Bean(2)" /><published>2021-09-25T00:00:00+09:00</published><updated>2021-09-25T00:00:00+09:00</updated><id>https://seongtaekkim.github.io/springframework-bean(2)</id><content type="html" xml:base="https://seongtaekkim.github.io/springframework-bean(2)">&lt;p&gt;빈등록&lt;/p&gt;

&lt;p&gt;빈생성&lt;/p&gt;

&lt;p&gt;빈조회&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">JAVA CORE - Reflection</title><link href="https://seongtaekkim.github.io/java-reflection" rel="alternate" type="text/html" title="JAVA CORE - Reflection" /><published>2021-09-19T09:40:00+09:00</published><updated>2021-09-19T09:40:00+09:00</updated><id>https://seongtaekkim.github.io/java-reflection</id><content type="html" xml:base="https://seongtaekkim.github.io/java-reflection">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– JAVA CORE –&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./java-jvm&quot;&gt;JAVA CORE - JVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;작성중&quot;&gt;(작성중)&lt;/h3&gt;

&lt;p&gt;Reflection 예제&lt;/p&gt;</content><author><name>seongtaekkim</name></author><category term="java" /><summary type="html">– JAVA CORE – JAVA CORE - JVM</summary></entry><entry><title type="html">스프링 bean생성원리 분석(1)</title><link href="https://seongtaekkim.github.io/springframework-bean(1)" rel="alternate" type="text/html" title="스프링 bean생성원리 분석(1)" /><published>2021-09-19T04:36:01+09:00</published><updated>2021-09-19T04:36:01+09:00</updated><id>https://seongtaekkim.github.io/springframework-bean(1)</id><content type="html" xml:base="https://seongtaekkim.github.io/springframework-bean(1)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– 스프링 따라하기 –&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-remake&quot;&gt;springframework - 따라하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-architecture&quot;&gt;springframework - 아키텍처&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-bean(1)&quot;&gt;springframework - bean생성원리 분석(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개요&quot;&gt;개요&lt;/h3&gt;
&lt;p&gt;SpringFramework의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnnotationConfigApplicationContext  &lt;/code&gt;생성을 통한 빈 등록 및  빈 생성 절차를 알아보자.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;springtestapplicationjava&quot;&gt;SpringTestApplication.java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@Configuration을 정의한 AppConfig.java를 이용해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnnotationConfigApplicationContext&lt;/code&gt; 를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnnotationConfigApplicationContext&lt;/code&gt; 를 생성할 때 빈이 등록,생성되는데 디버깅을 통해 대략적인 순서를 알아보자.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;annotationconfigapplicationcontextjava&quot;&gt;AnnotationConfigApplicationContext.java&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;생성자 코드 중에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt;메서드는  빈 등록, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refresh&lt;/code&gt; 메서드는 빈 생성을 담당한다.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-register-메서드---빈-등록&quot;&gt;1. register 메서드 - 빈 등록&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;At least one component class must be specified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;StartupStep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerComponentClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.context.component-classes.register&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;registerComponentClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;this.reader.register(componentClasses); 메서드로 이동하면 , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnnotatedBeanDefinitionReader&lt;/code&gt;클래스로 이동한다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;annotatedbeandefinitionreaderjava&quot;&gt;AnnotatedBeanDefinitionReader.java&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;상단 주석을 보면, Register a bean from the given bean class, deriving its metadata from class-declared annotations. 이라는 표현이 있다.  프로그래머가 annotation으로 정의한 빈을 등록하는 곳 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doRegisterBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qualifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanDefinitionCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;AnnotatedGenericBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnotatedGenericBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;conditionEvaluator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shouldSkip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInstanceSupplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;ScopeMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scopeMetadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scopeMetadataResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveScopeMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scopeMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScopeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanNameGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;AnnotationConfigUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;processCommonDefinitionAnnotations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qualifiers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qualifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qualifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Primary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPrimary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLazyInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addQualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutowireCandidateQualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customizers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeanDefinitionCustomizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;customizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;BeanDefinitionHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definitionHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanDefinitionHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;definitionHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnotationConfigUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyScopedProxyMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scopeMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definitionHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;BeanDefinitionReaderUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definitionHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;마지막 줄의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanDefinitionReaderUtils&lt;/code&gt; 클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registerBeanDefinition&lt;/code&gt; 메서드를 통해 빈이 등록된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;genericapplicationcontextjava&quot;&gt;GenericApplicationContext.java&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;주석에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanDefinitionRegistry&lt;/code&gt; 의 구현체라고 되어있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//---------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Implementation of BeanDefinitionRegistry&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//---------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanDefinitionStoreException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;this.beanFactory는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultListableBeanFactory&lt;/code&gt; 타입의 상수객체이다.
    &lt;ul&gt;
      &lt;li&gt;private final DefaultListableBeanFactory beanFactory;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;defaultlistablebeanfactoryjava&quot;&gt;DefaultListableBeanFactory.java&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultListableBeanFactory&lt;/code&gt; 클래스는 bean을 등록,조회하는 역할을 한다. (등록된 빈도 정의되어 있다.)
    &lt;ul&gt;
      &lt;li&gt;빈 등록 객체 : Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//---------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Implementation of BeanDefinitionRegistry interface&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//---------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanDefinitionStoreException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bean name must not be empty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BeanDefinition must not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AbstractBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeanDefinitionValidationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanDefinitionStoreException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;Validation of bean definition failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAllowBeanDefinitionOverriding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanDefinitionOverrideException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInfoEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overriding user-defined bean definition for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;' with a framework-generated bean definition: replacing [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] with [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDebugEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overriding bean definition for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;' with a different definition: replacing [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;] with [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTraceEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overriding bean definition for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;' with an equivalent definition: replacing [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;] with [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasBeanCreationStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Cannot modify startup-time collection elements anymore (for stable iteration)&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedDefinitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;updatedDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;updatedDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;removeManualSingletonName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Still in startup registration phase&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;removeManualSingletonName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frozenBeanDefinitionNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containsSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resetBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isConfigurationFrozen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;clearByTypeCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;빈이름이 등록되어있는지 조회하여 존재하지 않으면, 빈을 등록한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;register 구조 참조
&lt;img src=&quot;assets/built/images/spring/spring-bean1.png&quot; align=&quot;left&quot; width=&quot;100%&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-refresh-메서드---빈-생성&quot;&gt;2. refresh 메서드 - 빈 생성&lt;/h3&gt;

&lt;h4 id=&quot;abstractapplicationcontextjava&quot;&gt;AbstractApplicationContext.java&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;finishBeanFactoryInitialization(beanFactory) 메서드는 실제 빈을 생성하는 로직이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalStateException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startupShutdownMonitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;StartupStep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextRefresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.context.refresh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Prepare this context for refreshing.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prepareRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Tell the subclass to refresh the internal bean factory.&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obtainFreshBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Prepare the bean factory for use in this context.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prepareBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Allows post-processing of the bean factory in context subclasses.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;nc&quot;&gt;StartupStep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanPostProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.context.beans.post-process&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Invoke factory processors registered as beans in the context.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Register bean processors that intercept bean creation.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;registerBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;beanPostProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Initialize message source for this context.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;initMessageSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Initialize event multicaster for this context.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;initApplicationEventMulticaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Initialize other special beans in specific context subclasses.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;onRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Check for listener beans and register them.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;registerListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Instantiate all remaining (non-lazy-init) singletons.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Last step: publish corresponding event.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;finishRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isWarnEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exception encountered during context initialization - &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;cancelling refresh attempt: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Destroy already created singletons to avoid dangling resources.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;destroyBeans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Reset 'active' flag.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;cancelRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Propagate exception to caller.&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Reset common introspection caches in Spring's core, since we&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// might not ever need metadata for singleton beans anymore...&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;resetCommonCaches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;contextRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;finishbeanfactoryinitialization-메서드&quot;&gt;finishBeanFactoryInitialization 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;주석 : Finish the initialization of this context’s bean factory&lt;strong&gt;, initializing all remaining singleton beans.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Initialize conversion service for this context.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONVERSION_SERVICE_BEAN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTypeMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONVERSION_SERVICE_BEAN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONVERSION_SERVICE_BEAN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Register a default embedded value resolver if no BeanFactoryPostProcessor&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// at this point, primarily for resolution in annotation attribute values.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasEmbeddedValueResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEmbeddedValueResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolvePlaceholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaverAwareNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanNamesForType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LoadTimeWeaverAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaverAwareName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaverAwareNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weaverAwareName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Stop using the temporary ClassLoader for type matching.&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTempClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Allow for caching all bean definition metadata, not expecting further changes.&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;freezeConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Instantiate all remaining (non-lazy-init) singletons.&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preInstantiateSingletons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;beanFactory.preInstantiateSingletons(); 메서드에서 싱글톤 객체를 생성한다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;defaultlistablebeanfactoryjava-1&quot;&gt;DefaultListableBeanFactory.java&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1번의 register메서드에서 등록한 this.beanDefinitionNames를 대상으로 빈 생성을 수행한다.&lt;/li&gt;
  &lt;li&gt;isFactoryBean(beanName) 가 false이므로 getBean(beanName); 메서드를 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preInstantiateSingletons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Iterate over a copy to allow for init methods which in turn register new bean definitions.&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// While this may not be part of the regular factory bootstrap, it does otherwise work fine.&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Trigger initialization of all non-lazy singleton beans...&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMergedLocalBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAbstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLazyInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FACTORY_BEAN_PREFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nc&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmartFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SmartFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmartFactoryBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SmartFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;getBean(beanName); 로 이동하여, doGetBean 구현부로 이동한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abstractbeanfactoryjava---dogetbean-메서드&quot;&gt;AbstractBeanFactory.java  &amp;gt; doGetBean 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;싱글톤,프로토타입에 따라 분기하여 객체를 생성한다.&lt;/li&gt;
  &lt;li&gt;싱글톤 :  getSingleton 메서드의 콜백메서드인 creaeBean을 살펴보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGetBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requiredType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeCheckOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformedBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Eagerly check singleton cache for manually registered singletons.&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Create bean instance.&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;c1&quot;&gt;// Explicitly remove instance from singleton cache: It might have been put there&lt;/span&gt;
                  &lt;span class=&quot;c1&quot;&gt;// eagerly by the creation process, to allow for circular reference resolution.&lt;/span&gt;
                  &lt;span class=&quot;c1&quot;&gt;// Also remove any beans that received a temporary reference to the bean.&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;destroySingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getObjectForBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPrototype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adaptBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requiredType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;defaultsingletonbeanregistryjava---getsingleton-메서드&quot;&gt;DefaultSingletonBeanRegistry.java  &amp;gt; getSingleton 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;singletonObject = singletonFactory.getObject(); 를 통해서 doGetBean메서드의 createBean구현부로 이동가능함.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bean name must not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;
                
				&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;singletonObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;newSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalStateException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;addSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abstractautowirecapablebeanfactoryjava--createbean&quot;&gt;AbstractAutowireCapableBeanFactory.java &amp;gt; createBean&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Object beanInstance = doCreateBean(beanName, mbdToUse, args); 으로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanCreationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doCreateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbdToUse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTraceEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finished creating instance of bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeanCreationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImplicitlyAppearedSingletonException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abstractautowirecapablebeanfactoryjava--docreatebean-메서드&quot;&gt;AbstractAutowireCapableBeanFactory.java &amp;gt; doCreateBean 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;빈은 BeanWrapper타입으로 감싸서 생성된다.&lt;/li&gt;
  &lt;li&gt;instanceWrapper = createBeanInstance(beanName, mbd, args); 으로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCreateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanCreationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Instantiate the bean.&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factoryBeanInstanceCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abstractautowirecapablebeanfactoryjava--createbeaninstance&quot;&gt;AbstractAutowireCapableBeanFactory.java &amp;gt; createBeanInstance&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;instantiateBean 메서드로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Make sure bean class is actually resolved at this point.&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// No special handling: simply use no-arg constructor.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abstractautowirecapablebeanfactoryjava--instantiatebean&quot;&gt;AbstractAutowireCapableBeanFactory.java &amp;gt; instantiateBean&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;getInstantiationStrategy().instantiate(mbd, beanName, this); 으로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInstantiationStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInstantiationStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapperImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;initBeanWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Instantiation of bean failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;simpleinstantiationstrategyjava--instantiate&quot;&gt;SimpleInstantiationStrategy.java &amp;gt; instantiate&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;CGLIB override 검사를 하고, 드디어 인스턴스를 생성한다.&lt;/li&gt;
  &lt;li&gt;BeanUtils.instantiateClass(constructorToUse); 으로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Don't override the class with CGLIB if no overrides.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMethodOverrides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;constructorArgumentLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolvedConstructorOrFactoryMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanInstantiationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Specified class is an interface&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrivilegedExceptionAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;clazz:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDeclaredConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolvedConstructorOrFactoryMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanInstantiationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No default constructor found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instantiateClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructorToUse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Must generate CGLIB subclass.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateWithMethodInjection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;beanutilsjava--instantiateclass-메서드&quot;&gt;BeanUtils.java &amp;gt; instantiateClass 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;ReflectionUtils 클래스에서 인스턴스를 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanInstantiationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Constructor must not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;ReflectionUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeAccessible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Can't specify more arguments than constructor parameters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argsWithDefaultValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;argsWithDefaultValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPrimitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEFAULT_TYPE_VALUES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;argsWithDefaultValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsWithDefaultValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abstractautowirecapablebeanfactoryjava--initializebean&quot;&gt;AbstractAutowireCapableBeanFactory.java &amp;gt; initializeBean&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;인스턴스 생성 후,  초기화를 진행한다.&lt;/li&gt;
  &lt;li&gt;applyBeanPostProcessorsBeforeInitialization -&amp;gt; invokeInitMethods -&amp;gt; applyBeanPostProcessorsAfterInitialization&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initializeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;invokeAwareMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;invokeAwareMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyBeanPostProcessorsBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;invokeInitMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invocation of init method failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyBeanPostProcessorsAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;defaultsingletonbeanregistryjava--addsingleton-메서드&quot;&gt;DefaultSingletonBeanRegistry.java &amp;gt; addSingleton 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;singletonObjects 객체에 빈을 추가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonFactories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;earlySingletonObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registeredSingletons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflesh-구조-참조&quot;&gt;reflesh 구조 참조&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;assets/built/images/spring/spring-bean2.png&quot; align=&quot;left&quot; width=&quot;100%&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;SpringFramework의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnnotationConfigApplicationContext  &lt;/code&gt;생성을 통한 빈 등록 및  빈 생성 절차를 알아보았다.&lt;/p&gt;

&lt;p&gt;AnnotationConfigApplicationContext 생성자는 register 메서드와 reflesh메서드를 호출한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt;는 빈 등록업무를 진행한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultListableBeanFactory &lt;/code&gt;클래스의 Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap을 통해 등록된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflesh&lt;/code&gt;는  beanDefinitionMap에 등록된 빈을 대상으로 생성을 진행한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultSingletonBeanRegistry &lt;/code&gt;클래스의 private final Map&amp;lt;String, Object&amp;gt; singletonObjects을 통해 등록된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;출처&quot;&gt;출처&lt;/h4&gt;

&lt;p&gt;1.빈 생성절차&lt;/p&gt;

&lt;p&gt;https://private-space.tistory.com/71?category=865490&lt;/p&gt;

&lt;p&gt;2.DefaultListableBeanFactory  정리글&lt;/p&gt;

&lt;p&gt;https://okky.kr/article/563392&lt;/p&gt;</content><author><name>seongtaekkim</name></author><category term="spring" /><summary type="html">– 스프링 따라하기 – springframework - 따라하기 springframework - 아키텍처 springframework - bean생성원리 분석(1)</summary></entry><entry><title type="html">JAVA CORE - JVM</title><link href="https://seongtaekkim.github.io/java-jvm" rel="alternate" type="text/html" title="JAVA CORE - JVM" /><published>2021-09-18T09:40:00+09:00</published><updated>2021-09-18T09:40:00+09:00</updated><id>https://seongtaekkim.github.io/java-jvm</id><content type="html" xml:base="https://seongtaekkim.github.io/java-jvm">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– JAVA CORE –&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./java-jvm&quot;&gt;JAVA CORE - JVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;jvm-구조-및-분석-작성중&quot;&gt;JVM 구조 및 분석 (작성중)&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jvm&quot;&gt;JVM&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Java Virtual machine&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;바이트코드(.class)를 OS에 특화된 코드로 변환(인터프리터, JIT)하여 실행.&lt;/li&gt;
  &lt;li&gt;JVM은 벤더사마다 다르게 구현되어있다. (오라클, 아마존 등)
    &lt;ul&gt;
      &lt;li&gt;특정 플랫폼에 종속적이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jvm-구조&quot;&gt;JVM 구조&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;클래스로더
    &lt;ul&gt;
      &lt;li&gt;로딩 -&amp;gt; 링크 -&amp;gt; 초기화&lt;/li&gt;
      &lt;li&gt;.class에서 바이트코드를 읽고 메모리에 저장한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메모리
    &lt;ul&gt;
      &lt;li&gt;스택,PC,힙,메소드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실행엔진
    &lt;ul&gt;
      &lt;li&gt;인터프리터, JIT컴파일러, GC&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;classloader-예제&quot;&gt;ClassLoader 예제&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;java프로젝트를 시작하고, class를 로딩한 주체를 출력해보자&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;결과-출력&quot;&gt;결과 출력&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc
jdk.internal.loader.ClassLoaders$PlatformClassLoader@7c30a502
null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;클래스로더는 계층구조로 되어있다.
    &lt;ul&gt;
      &lt;li&gt;APP -&amp;gt; PLATFORM -&amp;gt; BOOT 순서로 계층구조로 되어있다.&lt;/li&gt;
      &lt;li&gt;BOOT의 경우, native code로 작성되어 null로 조회된다고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/built/images/java/java-jvm1.png&quot; align=&quot;left&quot; height=&quot;250px&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ClassLoaders.java에 클래스로더 맴버변수를 확인할 수 있다,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/built/images/java/java-jvm2.png&quot; align=&quot;left&quot; height=&quot;300px&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ClassLoader 계층구조&lt;/li&gt;
&lt;/ul&gt;</content><author><name>seongtaekkim</name></author><category term="java" /><summary type="html">– JAVA CORE – JAVA CORE - JVM</summary></entry><entry><title type="html">스프링 따라하기</title><link href="https://seongtaekkim.github.io/springframework-architecture" rel="alternate" type="text/html" title="스프링 따라하기" /><published>2021-09-11T15:36:01+09:00</published><updated>2021-09-11T15:36:01+09:00</updated><id>https://seongtaekkim.github.io/springframework-architecture</id><content type="html" xml:base="https://seongtaekkim.github.io/springframework-architecture">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– 스프링 따라하기 –&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-remake&quot;&gt;springframework - 따라하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-architecture&quot;&gt;springframework - 아키텍처&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-bean(1)&quot;&gt;springframework - bean생성원리 분석(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;springframework-architecture&quot;&gt;SpringFramework architecture&lt;/h1&gt;

&lt;h2 id=&quot;아키텍처&quot;&gt;아키텍처&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.kakaocdn.net/dn/dXQ6s0/btqCXvb5fVY/AzjKoJZiB8jfWvkN1Njbhk/img.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;실제-구동순서&quot;&gt;실제 구동순서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Web Application&lt;/strong&gt; = &lt;strong&gt;Web Server&lt;/strong&gt; + &lt;strong&gt;Web Container&lt;/strong&gt;(= Servlet Container)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web Container&lt;/strong&gt; 는 유저의 요청에 따라 &lt;strong&gt;Servlet 자원에 대한 생명주기를 관리&lt;/strong&gt;합니다.&lt;/li&gt;
  &lt;li&gt;webContainer : servlet 단위 처리&lt;/li&gt;
  &lt;li&gt;springContainer : bean 단위처리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://aaronryu.github.io/2021/02/14/a-tutorial-for-spring-mvc-and-security/spring-web-application-description-3-filter-and-interceptor.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;웹 애플리케이션이 실행되면 Tomcat(WAS)에 의해 web.xml이 로딩된다.&lt;/p&gt;

    &lt;p&gt;(load-on-startup으로 톰캣 시작시 servlet생성 가능하도록 설정 가능)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;web.xml에 등록되어 있는 ContextLoaderListener(Java class)가 생성된다. ContextLoaderListener 클래스는 ServletContextListener 인터페이스를 구현하고 있으며, ApplicationContext를 생성하는 역할을 수행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성된 ContextLoaderListener는 applicationContext.xml을 로딩한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;applicationContext.xml에 등록되어 있는 설정에 따라 Spring Container가 구동된다. 이때 개발자가 작성한 비즈니스 로징에 대한 부분과 DAO, VO 객체들이 생성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트로부터 웹애플리케이션 요청이 온다. (FrontController 패턴에 의해 수행된다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DispatcherServlet(Servlet)이 생성된다. DispatcherServlet은 FrontController의 역할을 수행한다. 클라이언트로부터 요청 온 메시지를 분석하여 알맞은 PageController에게 전달하고 응답을 받아 요청에 따른 응답을 어떻게 할지 결정만 한다. 실질적인 작업은 PageControlle에서 이뤄지기 때문이다. 이러한 클래스들을 HandlerMapping, ViewResolver클래스라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DispatcherServlet은 servlet-context.xml(spring-mvc.xml)을 로딩한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두 번째 Spring Container가 구동되면 응답에 맞는 PageController들이 동작한다. 이때 첫 번째 Spring Container가 구동되면서 생성된 DAO, VO, ServiceImpl 클래스들과 협업하여 알맞은 작업을 처리하게 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;모듈-의존관계&quot;&gt;모듈 의존관계&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;(모듈 == .jar)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://media.vlpt.us/images/wldus9503/post/b172f1a8-1463-4ee8-89c0-0fe8786b4fe8/spring%EB%AA%A8%EB%93%88%20%EC%9D%98%EC%A1%B4%EA%B4%80%E3%84%B1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;모듈별-역할&quot;&gt;모듈별 역할&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ArtifactId&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-aop&lt;/td&gt;
      &lt;td&gt;프록시 기반 AOP를 만들 때 필요한 어드바이스, 포인트컷, 프록시 팩토리빈, 자동 프록시 생성기 등을 제공&lt;br /&gt; - 필수 라이브러리 - Beans&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-aspects&lt;/td&gt;
      &lt;td&gt;스프링이 제공하는 AspectJ AOP를 사용할 때 필요한 모듈&lt;br /&gt; - JPA 지원 기능 사용시 ORM, 트랜잭션 기능 지원시 Transaction 필요&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-beans&lt;/td&gt;
      &lt;td&gt;스프링 DI 기능의 핵심인 빈 팩토리와 DI 기능을 제공하는 모듈&lt;br /&gt; - 빈 메타 정보, 빈 리더, 빈 팩토리의 구현과 프로퍼티 에디터가 포함&lt;br /&gt; - 필수 라이브러리 - ASM, Core&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-context&lt;/td&gt;
      &lt;td&gt;어플리케이션 컨텍스트 기능을 제공&lt;br /&gt;- 어플리케이션 컨텍스트를 만드는 데 필요한 대부분의 기능과 빈 스캐너, 자바코드 설정 기능, EJB 지원, 포메터, 로드타임 위빙, 표현식,&lt;br /&gt;- 단순한 빈팩토리가 아닌 엔터프라이즈 어플리케이션 프레임워크로 사용하기 위해 반드시 필요합니다.&lt;br /&gt;- 필수 라이브러리 - AOP, Expression&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-context-support&lt;/td&gt;
      &lt;td&gt;JMX JNDI, 리모팅, 스케줄링, 스크립트 언어 지원, 검증기 등의 컨테이너로서의 주요한 기능을 담고 있습니다.어플리케이션 컨텍스트에서 필요로 하는 부가기능을 지원&lt;br /&gt; - EhCache, 메일 추상화 서비스, CommonJ와 Quartz 스케줄링, FreeMarker, JasperReports, Velocity 팩토리 기능을 제공&lt;br /&gt;- 위의 기능을 사용하지 않으면 해당모듈은 필요업지만, 스프링 MVC가 Context.Support에 의존하므로 스프링 MVC를 사용한다면 필수로 추가해야 한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-core&lt;/td&gt;
      &lt;td&gt;스프링 모듈에서 필요로 하는 공통 기능을 갖는 핵심 모듈&lt;br /&gt; - 스프링에서 사용하는 주요 어노테이션, 컨버터, 상수, 유틸리티 클래스 등을 제공&lt;br /&gt; - 선택적 의존 - ASM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-expression&lt;/td&gt;
      &lt;td&gt;스프링 표현식 언어(SpEL) 기능을 지원&lt;br /&gt; - 필수 라이브러리 - Core&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-instrument&lt;/td&gt;
      &lt;td&gt;스프링의 로드타임위버(LTW) 기능을 적용할 때 필요함.&lt;br /&gt;JVM의 -javaagent 옵션을 자용해 자바에이전트로도 사용됨.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-instrument-tomcat&lt;/td&gt;
      &lt;td&gt;애플리케이션이 아닌 톰캣 서버의 클래스 로더로 사용하는 모듈&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-jdbc&lt;/td&gt;
      &lt;td&gt;JDBC 템플릿을 포함한 JDBC 지원 기능을 제공&lt;br /&gt;- JdbcTemplate 등의 JDBC 지원 오브젝트 외에도 스프링이 직접 제공하는 DataSource 구현 클래스들이 제공&lt;br /&gt;- 필수 라이브러리 - 트랜잭션&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-jms&lt;/td&gt;
      &lt;td&gt;스프링의 JMS 지원 기능을 사용할 때 필요한 모듈&lt;br /&gt; - 필수 라이브러리 - Transaction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-messaging&lt;/td&gt;
      &lt;td&gt;스프링 메세징 기능을 제공한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-orm&lt;/td&gt;
      &lt;td&gt;하이버네이트, JPA, JDO, iBatis와 같은 ORM에 대한 스프링의 지원 기능&lt;br /&gt; - 내부적으로 JDBC를 사용한다.&lt;br /&gt; - 필수 라이브러리 : JDBC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-oxm&lt;/td&gt;
      &lt;td&gt;Object/XML Mapping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-test&lt;/td&gt;
      &lt;td&gt;Test는 스프링의 테스트 지원기능을 가진 모듈&lt;br /&gt;(테스트 컨텍스트 프레임워크나 목 오브젝트 등을 이용)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-tx&lt;/td&gt;
      &lt;td&gt;스프링의 데이터 액세스 추상화의 공통 기능을 담고 있습니다.&lt;br /&gt; - DataAcssessException 예외 계층구조와 트랜잭션 추상화 기능, 트랜잭션 동기화 저장소 그리고 JCA 기능을 포함&lt;br /&gt;- 필수 라이브러리 - Context&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-web&lt;/td&gt;
      &lt;td&gt;스프링 웹 기술의 공통적인 기능을 정의한 모듈&lt;br /&gt;- 바인딩, 컨텍스트 로더, 필터, 멀티파트, 메세지 컨버터 기능을 제공&lt;br /&gt;- 스프링 MVC 외에도 스프링이 지원하는 스트럿츠, JSF 등을 적용할 때 필요&lt;br /&gt;- Caucho, HttpInvoker, JAX-RPC, JAX-WS 등의 리모팅 기능도 포함&lt;br /&gt;- 필수 라이브러리 - Context&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-webmvc&lt;/td&gt;
      &lt;td&gt;스프링 MVC 기능을 제공하는 모듈&lt;br /&gt; - 필수 라이브러리 - Web, Context.Support&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;portlet&lt;/td&gt;
      &lt;td&gt;Portlet 개발에 사용하는 스프링 모듈&lt;br /&gt; - 필수 라이브러리 - Web.Servlet&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-websocket&lt;/td&gt;
      &lt;td&gt;WebSocket and SockJS infrastructure, including STOMP messaging support&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring -asm&lt;/td&gt;
      &lt;td&gt;ASM 모듈은 클래스 바이트코드 조작 및 분석 프레임워크인 ASM을 재 패키징한 모듈입니다.&lt;br /&gt; - ASM 프레임워크는 스프링 뿐 아니라 여러 프레임워크에서 및 라이브러리에서 사용되는데 이때 스프링 프레임워크와&lt;br /&gt;ASM을 사용하는 다른 프레임워크와의 충돌을 방지하기 위해 org.springframework.asm 패키지로 재패키징해 독립적인 모듈로 제공합니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;출처&quot;&gt;출처&lt;/h4&gt;

&lt;p&gt;1.스프링 모듈 의존관계 설명&lt;/p&gt;

&lt;p&gt;https://dololak.tistory.com/2&lt;/p&gt;

&lt;p&gt;2.ApplicationContext 와 WebApplicationContext  차이&lt;/p&gt;

&lt;p&gt;https://dololak.tistory.com/21?category=636502&lt;/p&gt;

&lt;p&gt;3.스프링 동작순서&lt;/p&gt;

&lt;p&gt;https://aaronryu.github.io/2021/02/14/a-tutorial-for-spring-mvc-and-security/&lt;/p&gt;

&lt;p&gt;※ 저작권 문제 시 삭제하겠습니다.&lt;/p&gt;</content><author><name>seongtaekkim</name></author><category term="spring" /><summary type="html">– 스프링 따라하기 – springframework - 따라하기 springframework - 아키텍처 springframework - bean생성원리 분석(1) SpringFramework architecture</summary></entry><entry><title type="html">스프링 따라하기</title><link href="https://seongtaekkim.github.io/springframework-remake" rel="alternate" type="text/html" title="스프링 따라하기" /><published>2021-09-11T15:36:01+09:00</published><updated>2021-09-11T15:36:01+09:00</updated><id>https://seongtaekkim.github.io/springframework-remake</id><content type="html" xml:base="https://seongtaekkim.github.io/springframework-remake">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– 스프링 따라하기 –&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-remake&quot;&gt;springframework - 따라하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-architecture&quot;&gt;springframework - 아키텍처&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./springframework-bean(1)&quot;&gt;springframework - bean생성원리 분석(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;springframework-따라하기&quot;&gt;SpringFramework 따라하기&lt;/h2&gt;

&lt;p&gt;1.개요&lt;/p&gt;

&lt;p&gt;springFramework 동작방식을 이해하고, 간단한 toy-framework를 만들어보자.&lt;/p&gt;

&lt;p&gt;2.목표&lt;/p&gt;

&lt;p&gt;toy-framework를 활용한 웹사이트 로그인&lt;/p&gt;

&lt;p&gt;3.구현내용&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;bean container 구현&lt;/li&gt;
  &lt;li&gt;aop 구현&lt;/li&gt;
  &lt;li&gt;dataAccess 구현&lt;/li&gt;
  &lt;li&gt;context 구현&lt;/li&gt;
  &lt;li&gt;web mvc 구현&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.기한&lt;/p&gt;

&lt;p&gt;21.09.11 ~ 12.31&lt;/p&gt;

&lt;p&gt;5.개발환경&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tomcat&lt;/li&gt;
  &lt;li&gt;jdk11&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.참조 레퍼런스&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;springframework 4.3x&lt;/li&gt;
&lt;/ul&gt;</content><author><name>seongtaekkim</name></author><category term="spring" /><summary type="html">– 스프링 따라하기 – springframework - 따라하기 springframework - 아키텍처 springframework - bean생성원리 분석(1) SpringFramework 따라하기</summary></entry><entry><title type="html">Tobyspring1 1 Summary</title><link href="https://seongtaekkim.github.io/tobyspring1-1-summary" rel="alternate" type="text/html" title="Tobyspring1 1 Summary" /><published>2021-08-31T00:00:00+09:00</published><updated>2021-08-31T00:00:00+09:00</updated><id>https://seongtaekkim.github.io/tobyspring1-1-summary</id><content type="html" xml:base="https://seongtaekkim.github.io/tobyspring1-1-summary">&lt;h1 id=&quot;sringframework---bean&quot;&gt;SringFramework - Bean&lt;/h1&gt;

&lt;h2 id=&quot;빈-조회&quot;&gt;빈 조회&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빈 메타정보 확인&lt;/li&gt;
  &lt;li&gt;빈 조회&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;싱글톤&quot;&gt;싱글톤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;싱글톤 기본예제&lt;/li&gt;
  &lt;li&gt;Scope : 싱글톤, 프로토타입 예제&lt;/li&gt;
  &lt;li&gt;싱글톤 stateless&lt;/li&gt;
  &lt;li&gt;싱글톤과 configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;빈-생성&quot;&gt;빈 생성&lt;/h2&gt;

&lt;h3 id=&quot;beanutils&quot;&gt;BeanUtils&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;빈 객체 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;simpleinstantiationstrategy&quot;&gt;SimpleInstantiationStrategy&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;abstractautowirecapablebeanfactory&quot;&gt;AbstractAutowireCapableBeanFactory&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCreateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;abstractbeanfactory&quot;&gt;AbstractBeanFactory&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGetBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requiredType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeCheckOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;싱글톤 객체가 존재하는지 체크 (getSingleton)&lt;/li&gt;
  &lt;li&gt;scope가 싱글톤인지 프로토타입인지에 따라 생성방법이 분기처리됨. ( isSingleton )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;abstractbeanfactory-1&quot;&gt;AbstractBeanFactory&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;abstractautowirecapablebeanfactory-1&quot;&gt;AbstractAutowireCapableBeanFactory&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preInstantiateSingletons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3 id=&quot;abstractapplicationcontext&quot;&gt;AbstractApplicationContext&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;실제 빈을 생성하는 함수.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;annotationconfigapplicationcontext&quot;&gt;AnnotationConfigApplicationContext&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;beandefinitiontest&quot;&gt;BeanDefinitionTest&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration java에서 ApplicationContext를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;목차&quot;&gt;목차&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;spring bean 라이프사이클&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://yangbongsoo.gitbook.io/study/spring-1/basic&lt;/p&gt;

&lt;p&gt;https://jaimemin.tistory.com/1787&lt;/p&gt;

&lt;p&gt;https://jaehoney.tistory.com/25&lt;/p&gt;

&lt;p&gt;https://cantcoding.tistory.com/47&lt;/p&gt;

&lt;p&gt;@Component&lt;/p&gt;

&lt;p&gt;- 개발자가 직접 작성한 클래스를 bean 등록하고자 할 경우 사용&lt;/p&gt;

&lt;p&gt;@Configuration + @Bean&lt;/p&gt;

&lt;p&gt;- 외부라이브러 또는 내장 클래스를 bean으로 등록하고자 할 경우 사용.&lt;/p&gt;

&lt;p&gt;- 1개 이상의 @Bean을 제공하는 클래스의 경우 반드시 @Configuraton을 명시&lt;/p&gt;

&lt;p&gt;http://wonwoo.ml/index.php/post/1701&lt;/p&gt;

&lt;p&gt;https://castleone.tistory.com/2&lt;/p&gt;

&lt;p&gt;7장까지 끌어갈 주제를 생각&lt;/p&gt;

&lt;p&gt;싱글톤&lt;/p&gt;

&lt;p&gt;https://webdevtechblog.com/%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4-singleton-pattern-db75ed29c36&lt;/p&gt;

&lt;p&gt;https://okky.kr/article/563392&lt;/p&gt;

&lt;p&gt;http://ldg.pe.kr/framework_reference/spring/ver1.2.2/html/beans.html#beans-factory-modes&lt;/p&gt;

&lt;p&gt;https://jwdeveloper.tistory.com/189?category=823920&lt;/p&gt;

&lt;p&gt;스프링 코어 관련&lt;/p&gt;

&lt;p&gt;https://jhhan009.tistory.com/66?category=761889&lt;/p&gt;

&lt;h3 id=&quot;빈-생성-방식---cglib&quot;&gt;빈 생성 방식 - CGLIB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;@Configuration 생성 방식을 찾아보자&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">SringFramework - Bean</summary></entry><entry><title type="html">토비의스프링2권 2장</title><link href="https://seongtaekkim.github.io/spring-toby2_2" rel="alternate" type="text/html" title="토비의스프링2권 2장" /><published>2021-08-19T19:36:01+09:00</published><updated>2021-08-19T19:36:01+09:00</updated><id>https://seongtaekkim.github.io/spring-toby2_2</id><content type="html" xml:base="https://seongtaekkim.github.io/spring-toby2_2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– 토비의스프링 2권 정리 –&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-toby2_2&quot;&gt;토비의스프링2권 2장&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h1&gt;

&lt;p&gt;스프링이 처음 등장했을 때의 모토는 “객체지향 원칙에 충실한 POJO 에 엔터프라이즈 서비스를 제공한다”였다. 엔터프라이즈 서비스가 제공되는 컴포넌트를 지향하던 당시의 EJB는 특정 클래스의 상속과 인터페이스 구현을 강제하고 툴의 지원 없이는 작성이 거의 불가할 정도로 복잡한 XML 설정파일과 고가의 서버와 컨테이너 등을 필요로 했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EJB 가 제공했던 엔터프라이즈 서비스에서 가장 매력적인 것은 바로 선언적 트랜잭션이다.&lt;/strong&gt; &lt;strong&gt;선언적 트랜잭션 경계설정 기능을 이용하면 코드 내에서 직접 트랜잭션을 관리 하고 트랜잭션 정보를 파라미터로 넘겨서 사용하지 않아도 된다. 선언적 트랜잭션의 가장 큰 장점은 트랜잭션 스크립트 방식의 코드를 탈피할 수 있다는 것이다.&lt;/strong&gt;
트랜잭션 스크립트란 하나의 트랜잭션 안에서 동작해야 하는 코드를 한 군데 모아서 만드는 방식이다. 보통 트랜잭션마다 하나의 메소드로 구성된다. 메소드의 앞부분에서 DB를 연결하고 트랜잭션을 시작히는 코드가 나오고， 이렇게 만들어진 트랜잭션 안에서 DB를 액세스히는 코드와 그 결과를 가지고 비즈니스 로직을 적용하는 코드가 뒤엉켜서 등장한다. 물론 트랜잭션 내의 일부 작업은 메소드를 분리해서 만들 수는 있지만， 그래도 같은 트랜잭션 안에서 동작함을 보장하려면 Connection과 같은 트랜잭션 정보가 담긴 파라미터를 계속 물고 다녀야 한다. 트랜잭션 스크립트 방식의 코드에는 중복이 자주 발생한다. 지주 사용되는 DB 액세스 로직이 여러 트랜잭션 스크립트 안에 중복돼서 등장하기 쉽기 때문이다. &lt;strong&gt;비즈니스 로직과 데이터 액세스 로직이 한데 코드에 섞여 있는 문제는 말할 것도 없다.&lt;/strong&gt;
트랜잭션 스크립트 코드에 DAO 패턴을 적용해서 데이터 액세스 로직을 분리하는 시도를 해볼 수 있겠지만， 트랜잭션을 명시적으로 시작하고 종료하는 경계 설정코드가 비즈니스 로직 코드에 함께 등장하는 것과 매번 트랜잭션 정보를 메소드 따라미터로 넘기는 불편은 여전히 남아 있다.
&lt;strong&gt;하지만 선언적 트랜잭션 경계설정을 사용하면 이런 문제를 모두 해결할 수 있다. 트랜잭션이 시작되고 종료되는 지점은 별도의 설정을 통해 결정된다.&lt;/strong&gt; 또 작은 단위로 분리되어 있는 데이터 액세스 로직과 비즈니 스 로직 컴포넌트와 메소드를 조합해서 하나의 트랜잭션에서 동작하게 만드는 것도 간단하다. 선언적 트랜잭션이 제공히는 트랜 잭션 전파 기능 덕분이다. 의미 있는 작은 단위로 만들어진 오브젝트와 메소드를 적절한 순서대로 조합해서 호출하기만 하면 코드의 중복 없이 다양한 트랜잭션 안에서 동작 하는 코드를 만들 수 있다. A, B, C 라는 세 개의 오브젝트 또는 메소드가 있다고 하자.&lt;/p&gt;

&lt;p&gt;A나 B 나 C 가 그 자체로 독립적인 트랜잭션으로 동작하게 하려면 A, B, C를 각각 트랜 잭션 경계로 지정해주면 된다 A가 시작될 때 트랜잭션이 시작되고 A의 메소드를 종료할 때 트랜잭션이 함께 종료된다. 그런데 A-B, A-C, B-C ， A-B-C와 같은 구성으로 트랜잭션을 만들고 싶을 수도 있다. 이때도 A-B 의 코드를 하나로 묶어서 새로운 트랜잭션 스크립트를 만들 필요는 없다.&lt;strong&gt;A 에서 B 의 코드를 호출하게 하고 각각의 트랜잭션 전파 속성을 ‘트랜잭션 필요(REQUIRED)’로 해주면 된다&lt;/strong&gt;. 이렇게 해두면 A 에서 시작된 트랜잭션에 B 의 코드가 자동으로 참여하게 된다. 어떤 조합으로 만들어도 상관없다.&lt;/p&gt;

&lt;p&gt;선언적 트랜잭션 경계설정을 사용하면， 결국 코드의 중복을 제거하고 작은 단위의 컴포넌트로 쪼개서 개발한 후에 이를 조합해서 쓸 수 있다. 다 다양한 로직이 복잡하게 결합돼서 하나의 업무를 처리하는 엔터프라이즈 시스뱀의 요구조건을 가장 잘 충족시켜줄 기술이다.
EJB 의 이런 선언적 트랜잭션 기능을 복잡한 환경이나 구현조건 없이 평범한 POJO로 만든 코드에 적용하게 해주는 것이 바로 스프링이다. 스프링은 EJB 등에서나 제공 되던 엔터프라이즈 서비스를 POJO 의 장점을 유지한 채로 사용할 수 있게 만들어준다.
DI 로 대표되는， 스프링의 객체지향 설계 원칙에 충실한 핵심 기술이 이를 가능하게 만들어준다.
&lt;strong&gt;스프링의 선언적 트랜잭션은 매우 매력적인 기능이다. JavaEE 서버에서 동작히는 엔티티빈이나 JPA로 만든 컴포넌트에 JTA를 이용한 글로벌 트랜잭션을 적용해야만 가능했던 고급 기능을 간단한 톰켓 서버에서 동작히는 가벼운 애플리케이션에도 적용해 주기 때문이다.&lt;/strong&gt; &lt;strong&gt;또한 JDBC. JPA 하이버네이트 iBatis. JDO 등 스프링이 지원하는 대부분의 데이터 액세스 기술과 JMS 메시징 서비스， CCI 처럼 트랜잭션 개념을 지원한 서비스에도 적용할 수 있다. 원한다면 언제든지 WAS 가 제공하는 JTA와 연결해서 글로벌 트랜잭션 서비스의 혜택을 받을 수도 있다.&lt;/strong&gt;
스프링을 처음 사용히는 개발자가 가장 매력을 느끼는 기능이 이 선언적 트랙잭션 기능이라고 한다. 스프링의 그 밖의 장점은 잘 모르더라도 선언적 트랜잭션 기능이 절실히 펼요해서 스프링을 계속 사용하겠다는 개발자도 적지 않다. 그만큼 효과적인 엔터 프라이즈 개발애 목 필요한 중요한 기능이다.
이 절에서는 스프링이 제공동}는 선언적 트랜잭션 경계설정의 방법과 종류를 자세히 알아보겠다. 트랜잭션 예제 코드는 springbook.learningtest.spring.tx 패키지에서 찾을수있다.&lt;/p&gt;

&lt;h2 id=&quot;261-트랜잭션-추상화와-동기화&quot;&gt;2.6.1 트랜잭션 추상화와 동기화&lt;/h2&gt;

&lt;p&gt;스프링이 제공히는 트랜잭션 서비스는 트랜잭션 추상화와 트랜잭션 동기화 두 가지로 생각해볼수있다.
트랜잭션 서비스의 종류는 데이터 액세스 기술보다 더 다양하다. &lt;strong&gt;트랜잭션 서비스는 데이터 액세스 기술은 변하지 않더라도 환경에 따라 바뀔 수 있기 때 문이다.&lt;/strong&gt; 또， 스프링 없이 선언적 트랜잭션을 이용하려면 특정 기술과 서버 플랫폼， 특정 트랜잭션 서비스에 종속될 수밖에 없다. 스프링은 데이터 액세스 기술과 트랜잭션 서비스 사이의 종속성을 제거하고 스프링이 제공하는 트랜잭션 추상 계층을 이용해서 트랜잭션 기능을 활용하 도록 만들어준다. 이를 통해 트랜잭션 서비스의 종류나 환경이 바뀌더라도 트랜잭션을 사용하는 코드는 그대로 유지할 수 있는 유연성을 얻을 수 있다.
스프링의 트랜잭션 동기화는 트랜잭션을 일정 범위 안에서 유지해주고， 어디서든 자유롭게 접근할 수 있게 만들어준다. 트랜잭션 동기화는 트랜잭션 추상화， 데이터 액세스 기술을 위한 랩플릿과 더불어 선언적 트랜잭션을 가능하게 해주는 핵심기능이다.
스프링의 서비스추상화와동기회에 관한동작원리와특정은 Vol.l 에서 자세히 다뤘 으므로， 여&lt;strong&gt;기서는 데이터 액세스 기술에 따라 사용할 수 있는 트랜잭션 추상화 클래스의 종류와 사용 방법을 알아보겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;platformtransactionmanager&quot;&gt;PlatformTransactionManager&lt;/h3&gt;

&lt;p&gt;스프링 트랜잭션 추상화의 핵심 인터페이스는 PlatformTransactionManager 다. 모든 스프링의 트랜잭션 기능과 코드는 이 인터페이스를 통해서 로우레벨의 트랜잭션 서비스를 이용할 수 있다. PlatformTransactionManager 인터페이스는 리스트 2-42와 같이세 개의 메소드를 갖고 있다.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리스트 2-42 PlatformTransactionManager 인터페이스&lt;/p&gt;

&lt;p&gt;PlatformTransactionManager는 트랜잭션 경계를 지정히는 데 사용한다. 트랜잭션이 어디서 시작하고 종료하는지 종료할 때 정상 종료(커밋) 인지 비정상 종료(롤백) 인지를 결정히는 것이다. 스프링에서는 시작과 종료를 트랜잭션 전파 기법을 이용해 자유롭게 조합하고 확장할 수 있다. 그래서 트랜잭션을 시작한다는 의미의 begin() 과 같은 메소드 대신 적절한 트랜잭션을 가져온다는 의미의 getTransaction( ) 메소드를 사용한다.
&lt;strong&gt;getTransaction() 은 트랜잭션 속성에 따라서 새로 시작하거나 진행 중인 트랜잭션에 참여하거나， 진행 중인 트랜잭션을 무시하고 새로운 트랜잭션을 만드는 식으로 상황에 따라다르게동작한다.&lt;/strong&gt;
TransactionDefinition 은 트랜잭션의 네 가지 속성을 나타내는 인터페이스다.
&lt;strong&gt;TransactionStatus 는 현재 참여하고 있는 트랜잭션의 ID와 구분정보를 담고 있다. 커빗 또는 롤백 시에 이 TransactionStatus 를 사용한다.&lt;/strong&gt;
&lt;strong&gt;선언적 트랜잭션 방식을 시용할 것이라면 사실 PlatformTransactionManager 인터 페이스의 시용 방법은 몰라도 상관없다&lt;/strong&gt;. 다만 이 추상화된 인터페이스를 구현한 트랜 잭션 서비스 클래스의 종류를 알고 적절한 것을 선택해서 빈으로 둥록하는 방법만 알고 있으면 된다. 가끔 태스트에서 트랜잭션을 제어해가면서 태스트 코드를 만들어야 할 경우가 있는데， 그때는 PlatformTransactionManager를 직접 이용해야 할 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;트랜잭션매니저의종류&quot;&gt;트랜잭션매니저의종류&lt;/h3&gt;

&lt;p&gt;스프링이 제공하는 PlatformTransactionManager 구현 클래스를 살펴보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DataSourceTransactionManager&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Connection 의 트랜잭션 API를 이용해서 트랜잭션을 관리해주는 트랜잭션 매니저다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;이 트랜잭션 매니저를 사용하려면 트랜잭션을 적용할 DataSource 가 스프링의 빈으로 등록돼야 한다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;JDBC API를 이용해서 트랜잭션을 관리하는 데이터 액세스 기술인 JDBC와 iBatis SqlMap으로 만든 DAO 에 적용할 수 있다.
&lt;strong&gt;DataSourceTransactionManager를 빈으로 등록할 때는 리스트 2-43 과 같이 트랜잭션을 적용할 DAO 가 사용하는 것과 통일한 DataSource를 빈으로 제공해줘야 한다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리스트 2-43 DataSourceTransactionManager 빈 등록&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; . .. MemberJdbcDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dataSource'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org . .. SimpleDriverDataSource&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DataSourceTransactionManager 가 사용할 DataSource는 getConnection() 이 호출될 때마다 매번 새로운 Connection을 돌려줘야 한다. ThreadLocal 등을 이용해 트랜잭션을 저장해두고 돌려주는 특별한 기능을 가진 DataSource를 사용하면 안 된다.&lt;/p&gt;

&lt;p&gt;애플리케이션 코드에서 트랜잭션 매니저가 관리하는 Connection 을 가져오려면 DataSource의 getConnection() 대신 스프링 &lt;strong&gt;DataSourceUtils 클래스의 스태틱 메소드인 getConnection(DataSource) 를 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JdbcTemplate의 내부 에서 트랜잭션 매니저로부터 현재 진행 중인 트랜잭션을 가져올 때 바로 이 메소 드를 사용한다. 대개는 JdbcTemplate을 이용해서 DAO를 작성하면 되기 때문에 DataSourceUtils.getConnection() 으로 Connection을 직접 가져와 사용할 일은 많지 않다.&lt;/p&gt;

&lt;p&gt;JdbcTemplate을 사용할 수 없는 코드이거나 DAO 밖에서 현재 Connection을 가져와 참조해야 할 때만 주의해서 사용하자.
JdbcTemplate을 사용하지 않는 레거시 DAO 코드를 스프링의 트랜잭션 매니저와 연동해서 동작하게 하려면 어떻게 해야 할까?&lt;/p&gt;

&lt;p&gt;두 가지 방법이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;첫 번째 방법은 레거시 DAO 코드의 Connection을 가져오는 코드를 모두 DataSourceUtils.getConnection() 으로 변경하는 것이다.
두 번째 방법은 레거시 코드가 DataSource 의 getConnection() 을 직접 호출해서 Connection을 가져오는 경우에 적용할 수 있다.&lt;/p&gt;

    &lt;p&gt;리스트 2-44와 같이 DAO와 DataSource 사이에 TransactionAwareDataSourceProxy를 넣어서 레거시 DAO 코드에서 getConnection() 을 호출해도 매번 새로운 Connection 이 생성되지 않게 할수 있다.&lt;/p&gt;

    &lt;p&gt;대신 현재 트랜잭션 매니저가 관리하고 있는, 진행 중인 트랜잭션이 담긴 Connection 을 돌려주게 만들 수 있다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;DAO 에서는 마치 매번 새로운 Connection을 DataSource 에서 가져오는 것 같지만 실제로는 트랜잭션이 진행 중인 동안에는 매번 같은 Connection을 받게 된다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;자세한 내용은 TransactionAwareDataSourceProxy 의API 문서를 참고하자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리스트 2-44 레거시 DAO를 위한  빈&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;targetDataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;targetDataSource&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;targetDataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;SimpleDriverDataSource&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 DataSourceTransactionManager를 시용하는 여러 가지 방법이 있지만， JdbcTemplate 이나 SqlMapClientTemplate 처럼 내부에서 Connection과 트랜잭션 작업을 알아서 처리해주는 댐플릿을 시용하는 방법이 제일 좋다.
서버가 제공하는 DataSource와 트랜잭션 서비스를 JNDI로 접근해 사용해야 한다면 DataSourceTransactionManager는 사용할 수 없다. 그때는 JTA를 지원하는 스프 링의 트랜잭션 매니저를 사용해야 한다. 하나 이상의 DB 에 대한 작업을 트랜잭션으로 묶어야 동f는 경우에도 DataSourceTransactionManager를 시용하는 대신 JTA를 써야한다 .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JpaTransactionManager&lt;/p&gt;

    &lt;p&gt;jPA를 이용하는 DAO 에는 JpaTransactionManager를 사용한다. 물론 JTA로 트랜 잭션 서비스를 이용하는 경우에는 JpaTransactionManager 가 필요 없다.
리스트 2 -45 에서 볼 수 있듯이 JpaTransactionManager 에는 LocalContainerEntityManagerFactoryBean 타입의 빈을 프로퍼티로 등록해줘야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리스트 2-45 JpaTransactionManager 설정&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;..&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;..&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...MemberDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...MemberDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource1&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/bean&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource2&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/bean&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JpaTransactionManager 를 사용할 때는 JPA 의 persistence. xml 파일의&lt;persistence-unit&gt; 태그 내의 transaction-type을 JTA로 설정해두지 않도록 한다.&lt;/persistence-unit&gt;&lt;/p&gt;

&lt;p&gt;스프링이 제공하는 JpaTransactionManager를 사용할 것이므로 transactiontype 애트리뷰트는 생략한다.
JpaTransactionManager 는 DataSourceTransactionManager 가 제공 하는 DataSource 레벨의 트랜잭션 관리 기능을 동시에 제공한다. 따라서 JpaTransactionManager를 사용하면서 동시에 트랜잭션이 적용된 JDBC DAO를 사용할수도있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HibernateTransactionManager&lt;/p&gt;

    &lt;p&gt;하이버네이트 DAO 에는 HibernateTransactionManager 를 사용한다. 리스트 2-46 과 같이 SessionFactory 타입의 빈을 프로퍼티로 넣어주면 된다.
JpaTransactionManager와 마찬가지로 DataSource 레벨의 트랜잭션 기능도 동시에 제공한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리스트 2-46 하이버네이트 트랜잭션 매니저&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sessionFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'transactionManager'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'org .springframework.orm.hibernate3.HibernateTransactionManager'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sessionFactory.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sessionFactory'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JmsTransactionManager, CciTransactionManager&lt;/p&gt;

    &lt;p&gt;스프링은 DB뿐 아니라 트랜잭션이 지원되는 JMS 와 CCI를 위해서도 트랜잭션 매니저를 제공한다. JMS와 CCI 에 대해서는 이 책에서 다루지 않는다. 관심이 있다면 스프링 레퍼런스 문서와 API 문서를 참고해보기 바란다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JtaTransactionManager&lt;/p&gt;

    &lt;p&gt;하나 이상의 DB 또는 트랜잭션 리소스가 참여하는 글로벌 트랜잭션을 적용하려면 JTA를 이용해야 한다. JTA는 여러 개의 트랜잭션 리소스(DB. JMS 등)에 대한 작업을 하나의 트랜잭션으로 묶을 수 있고， 여러 대의 서버에 분산되어 진행되는 작업을 트랜잭션으로 연결해주기도 한다.&lt;/p&gt;

    &lt;p&gt;JTA 트랜잭션을 이용하려면 트랜잭션 서비스를 제공하는 WAS를 이용하거나 독립 JTA 서비스를 제공해주는 프레임워크를 사용해야 한다.
서버가 제공하는 JTA 트랜잭션 매니저를 스프링에서 이용히는 방법은 간단하다.
디음과 같이 JtaTransactionManager를 등록해주기만 하면 된다.&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로퍼티 설정 없이 JtaTransactionManager를 등록하면 디폴트로 등록된 JNDI 이름을 통해 서버의 TransactionManager와 UserTransaction을 찾는다.
디폴트로 사용하는 UserTransaction 의 JNDI 이름은 java:comp/UserTransaction 이고 
TransactionManager는 java :comp/TransactionManager,java :appserver / TransactionManager, java: pm / TransactionManager, java: / TransactionManager 네 가지다.
만약 디폴트 이름과 다르게 서버에 설정되어 있다면 transactionManagerName과 userTransactionName 프로퍼티 를 통해 이름을 지정해주면 된다.
JtaTransactionManager 를 사용할 때는 DataSource 도 서버에 등록된 XA DataSource를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;JNDI를 이용해 서버의 XA DataSource를 다음과 같이 빈으로 등록하고 DAO 나 EntityManagerFactory, SessionFactory 등에서 사용 하게해야한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;jee:jndi-lookup&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;jndi-name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc/myXADataSource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DB 가 하나라면 트랜잭션 매니저 또한 하나만 등록돼야 한다. DB 가 여러 개라도 JTA를 이용해 글로벌 트랜잭션을 적용할 것이라면 JtaTransactionManager 하나만 등록돼야 한다. 
단， 두 개 이상의 DB를 완전히 독립적으로 사용히는 경우라면 두 개 이상의 트랜잭션 매니저를 등록할 수는 있다. 
DB 가 두 개라면 DataSource도 두 개가 등록 돼야 한다. 또한 DataSource를 사용히는 DAO도 두 개가 등록돼야 한다.
DAO는 어떤 식으로든 DataSource 빈과 연결되기 때문이다. 만약 테이블 구조가 같은 두 개의 DB를 중복해서 사용하는 경우라면 DAO 코드가 달라지지 않을 것이다. 
이때는 DAO 클래스는 하나만 만들고 DAO 빈 두 개를 등록하면 된다.&lt;/p&gt;

&lt;p&gt;리스트 2-47은 두 개의 DB 에 대해 같은 기능을 가진 DAO를 독립적으로 등록한 설정의 예다 .DAO는 하나의 클래스를 가지고 두 개의 다른 빈으로 등록해서 사용할수 있지만 DataSource와 PlatformTransactionManager는 DB 별로 하나씩 등록해줘야 한다.&lt;/p&gt;

&lt;p&gt;리스트 2-47 두 개의 DB에 모두 사용되는 DAO 등록 방법&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;..&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;..&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...MemberDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...MemberDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource1&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/bean&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource2&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/bean&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;262-트랜잭션-경계설정-전략&quot;&gt;2.6.2 트랜잭션 경계설정 전략&lt;/h2&gt;

&lt;p&gt;트랜잭션 매니저를 빈으로 등록하고 JdbcTemplate 이나 스프링 트랜잭션과 연동되는 EntityManager 또는 Session을 사용하도록 DAO 코드를 작성했다면 다음은 트랜잭션의 경계를 설정하는 작업을 할 차례다.
트랜잭션의 시작과 종료가 되는 경계는 보통 서비스 계층 오브젝트의 메소드다. 
비즈니스 로직이 거의 없어서 서비스 계층과 데이터 액세스 계층을 통합했다면, 통합된 계층의 메소드가 트랜잭션 경계가 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;트랜잭션 경계를 설정하는 방법은 코드에 의한 프로그램적인 방법과， AOP를 이용한 선언적인 방법으로 구분할 수 있다.&lt;/strong&gt; 
&lt;strong&gt;전자는 트랜잭션을 다루는 코드를 직접 만들고， 후자는 AOP를 이용해 기존 코드에 트랜잭션 경계설정 기능을 부여해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;코드에-의한-트랜잭션-경계설정&quot;&gt;코드에 의한 트랜잭션 경계설정&lt;/h3&gt;

&lt;p&gt;스프링의 트랜잭션 매니저는 모두 PlatformTransactionManager를 구현하고 있다. 따라서 이 인터페이스로 현재 등록되어 있는 트랜잭션 매니저 빈을 가져올 수 있다면 트랜잭션 매니저의 종류에 상관없이 동일한 방식으로 트랜잭션을 제어하는 코드를 만들수 있다.&lt;/p&gt;

&lt;p&gt;트랜잭션을 처리하기 위해 PlatformTransactionManager 의 메소드를 직접 사용해도 되지만 try/catch 블록을 써야 히는 번거로움이 발생한다.&lt;/p&gt;

&lt;p&gt;트랜잭션 안에서 작업 중에 예외가 발생한 경우에는 트랜잭션을 롤백해주도록 만들어야 하기 때문이다. 
그래서 PlatformTransactionManager 의 메소드를 직접 시용하는 대신 댐플릿/콜백 방식의 TransactionTemplate을 이용하면 편리하다.&lt;/p&gt;

&lt;p&gt;리스트 2-48 은 코드에 의해 관리되는 트랜잭션 을 적용한 예다.&lt;/p&gt;

&lt;p&gt;MemberDao 는JDBC , iBatis , lPA , 하이버네이트 중 어떤 것을 이용해도 된다. 또， 트랜잭션 매니저 빈도 DAO 에서 사용한 기술과 호환만 된다면 DataSourceTransactionManager, JpaTransactionManager, HibernateTransactionManager, JtaTransactionManager 중어떤 것을 사용해도 된다. 
&lt;strong&gt;스프링 의 트랜잭션 서비스 추상화와 동기화 기법 덕분에 기술에서 독립적인 트랜잭션 코드를 만들 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;리스트 2-48 코드를 이용한 트랜잭션 경계설정 방법&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transactionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addMembers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dolnTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	                 &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;)};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;트랜잭션의 기본 속성을 변경하려면 TransactionTemplate 을 만들 때
TransactionDefinition 오브젝트를 만들어서 파라미터로 제공해주면 된다. 기본 속성을 사용한다면 위의 코드처럼 한 번 만들어두고 재사용할 수도 있다.
코드에 의한 트랜잭션 경계설정은 실제로는 많이 사용되지 않는다.&lt;/p&gt;

&lt;p&gt;대개는 선언적 트랜잭션 방식으로 충분하기 때문이다. 
반면에 테스트 코드에서 의도적으로 트랜잭션을 만들고 종료시키거나 여러 번 트랜잭션을 거치는 상황을 만들어야 하는 경우에는 유용하다.
&lt;strong&gt;코드에 의한 트랜잭션 경계설정 방식을 애플리케이션 코드에 사용하지 않더라도 PlatformTransactionManager를 통한 트랜잭션 추상화에 대해서는 잘 이해하고 있어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;선언적 트랜잭션은 트랜잭션이 시작되고 적용되는 코드가 눈에 보이지 않기 때문에 자칫 실수하면 트랜잭션 적용과 관련된 찾기 힘든 버그를 만날 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이때 트랜 잭션을 직접 코드에서 가져와 확인해보고 제어 해가면서 트랜잭션 적용 상태를 분석해 보면 어렵지 않게 문제의 원인을 찾을 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어디서든 PlatformTransactionManager 를 DI 받아서 getTransaction() 해보면 현재 진행 중인 트랜잭션을 확인할 수 있다.&lt;/strong&gt;
&lt;strong&gt;getTransaction() 이 돌려주는 TransactionStatus 오브젝트를 이용하면 현재 트랜잭션이 새로 시작된 것인지 기존 트랜잭션에 참여한 것인지 또는 트랜잭션이 종료된 것인지 확인할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;두 개의 DAO 또는 서비스 계층 코드가 같은 트랜잭션 안에서 동작 하고 있는지도 확인해볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;선언적-트랜잭션-경계설정&quot;&gt;선언적 트랜잭션 경계설정&lt;/h3&gt;

&lt;p&gt;선언적 트랜잭션을 이용하면 코드에는 전혀 영향을 주지 않으면서 특정 메소드 실행 전후에 트랜잭션이 시작되고 종료되거나 기존 트랜잭션에 참여하도록 만들 수 있다. 
&lt;strong&gt;이를 위해서는 Vol.1 에서 살펴본 것처럼 데코레이터 패턴을 적용한 트랜잭션 프록시 빈을 사용해야 한다. 선언적 트랜잭션 경계설정은 트랜잭션 프록시 빈 덕분에 가능한 것이다.&lt;/strong&gt;
&lt;strong&gt;트랜잭션은 대부분 성격이 비슷하기 때문에 적용 대상마다 일일이 선언해주기보다는 일괄적으로 선언히는 것이 펀리하다. 그래서 간단한 설정으로 특정 부가기능을 임의의 타깃 오브젝트에 부여해줄 수 있는 프록시 AOP를 주로 활용한다.&lt;/strong&gt;
스프링에서 AOP를 적용하는 방법은 매우 다양하다. 굳이 선언적 트랜잭션의 동작 원리와 AOP를 자세히 알고 싶은 게 아니라면， 트랜잭션에 사용되는 AOP는 AOP 라기 보다는고유한트랜잭션설정 기능으로기억하고사용하는것이 편하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AOP를 이용해 트랜잭션 기능을 부여하는 방법은 다양하지만 보통 다음의 두 가지 방법이 가장 많이 사용된다.&lt;/strong&gt; 
&lt;strong&gt;이 두 가지 중 하나를 선택해서 사용하면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;aop와 tx네임스페이스&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;스프링은 AOP 기능과 트랜잭션 설정을 위해 편리하게 사용할 수 있는 전용 태그를 제공한다. aop 스키마의 태그와 tx 스키마의 태그를 사용할 수 있다.&lt;/strong&gt;
트랜잭션 경계설정이라는 부가기능을 AOP를 이용해 빈에게 적용하려면 두 가지 정보가 필요하다. AOP는 부가기능을 빈 오브젝트에게 적용하는 방법이다. &lt;strong&gt;따라서 어떤 부가기능을 사용할지 결정해야 한다. AOP 용어로 하자면 어드바이스가 있어야 한다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;트랜잭션 경계설정 부가기능이므로 트랜잭션 어드바이스가 필요하다. 그리고 어떤 대상에게 이 부가기능을 부여할지를 선정해야 한다. 
선정 대상을 결정하는 기준이 필요하다. &lt;strong&gt;어드바이스가 적용될 대상을 선정하는 것을 AOP 용어로 포인트컷이라고 한다.&lt;/strong&gt; 따라서 트랜잭션 어드바이스와 포인트컷을 결합해서 하나의 AOP 모듈을 정의한다. 
&lt;strong&gt;하나의 AOP 모듈을 스프링에서는 어드바이저라고 부른다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;리스트 2-49 의 설정은 tx 스키마의 advice 태그를 이용해서 트랜잭션 부가기 능을 담은 트랜잭션 어드바이스를 정의한 것이다. 트랜잭션 속성은 원한다면 메소드 단위로 다르게 지정할 수 있다. 
여기서는 모든 메소드에 대해 기본 트랜잭션 속성을 지정하게 했다. 트랜잭션을 적용하려면 트랜잭션 매니저가 필요하다. 따라서
transaction-manager 애트리뷰트에 사용할 트랜잭션 매니저 빈의 아이디를 넣어줘야 한다. 
이 애트리뷰트의 디폴트 값은 transactionManager 이므로 트랜잭션 매니저 빈의 이름을 transactionManager로 선언했다면 생략할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리스트 2-49 트랜잭션 어드바이스&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:advice&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;txAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transaction-manager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:attributes&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:method&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:attributes&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:advice&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어드바이스가 준비됐으니 다음은 포인트컷을 정의할 차례다. 포인트컷은 AspectJ 표현식을 이용하는 것이 가장 간편하다.
aop 스키마의 pointcut 태그를 사용하면 다음과 같이 트랜잭션을 적용할 대상을 선정하는 포인트컷을 정의할 수 있다. 
이 포인트컷 표현식은 어떤 패키지에 있든 상관없이 이름이 MemberDao 인 인터페이스의 모든 메소드를 선정해준다. 
AOP 의 어드바이스가 적용되는 위치인 조인 포인트는 메소드 임을 기억하자. 
&lt;strong&gt;포인트컷은 원한다면 메소드 단위까지 상세하게 지정할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;txPointcut&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;execution(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;))&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;또 포인트컷은 기본적으로 인터페이스에 적용된다는 사실도 기억해두자.&lt;/strong&gt; 
&lt;strong&gt;스프링 AOP 의 동작원리인 JDK 다이내믹 프록시는 인터페이스를 이용해 프록시를 만들기 때문이다. 그런데 인터페이스 없이 클래스만으로 프록시를 만들 수도 있다.&lt;/strong&gt; 
인터페이스 없이 등록된 빈에도 AOP를 적용할 수 있다. 하지만 트랜잭션 AOP 의 타깃은 가능한 한 인터페이스를 사용할 것을 권장한다.
리스트 2-50은 MemberDao 인터페이스의 예다. DAO를 사용하는 클라이언트가 이용할 수 있는 메소드만 정의되어 있다. 당연히 모든 메소드에 트랜잭션이 적용돼 야한다.&lt;/p&gt;

&lt;p&gt;리스트 2-50 MemberDao 인터페이스&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반면에 리스트 2-51 의 MemberDaolmpl 클래스를살펴보자.&lt;/p&gt;

&lt;p&gt;리스트 2-51 MemberDao 구현 클래스&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberDaolmpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SimpleJdbclnsert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;SimpleJdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleJdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleJdbclnsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withTableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;특별한 방법을 써서 인터페이스 없이 이 클래스에 직접 트랜잭션 AOP 를 적용했다고 해보자.&lt;/strong&gt; 
포인트컷에서는 *를 이용해 모든 메소드를 선정하게 했다. 문제는 add() , deleteAll() , count() 와 같은 트랜잭션이 필요한 메소드뿐 아니라 setDataSource() 처럼 트랜잭션과 전혀 상관없는 메소드도 포인트컷의 선정 대상에 들어간다는 점이다.&lt;/p&gt;

&lt;p&gt;포인트컷 표현식은 이름 패턴을 이용해 대상을 선정하기 때문에 add() , deleteAll() , count() 는 포함시키고 setDataSource() 는 제외시키도록 표현 식을 만들 수 없다. 
&lt;strong&gt;따라서 트랜잭션이 필요한 DAO 의 공개된 메소드뿐 아니라 불필요한 수정자나 기타 DAO 내부에서 사용할 메소드까지 모두 트랜잭션이 적용되는 문제가 발생한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;물론 setDataSource() 가 호출되는 동안 트랜잭션이 시작됐다가 아무 일 없이 종료해도 기능에는 별문제 없을 것이다. 하지만 쓸데없는 트랜잭션 경계설정 작업을 수행하느라 그만큼 시간과 리소스를 소모하게 된다. 따라서 트랜잭션 AOP를 적용할 때는 가능한 한 인터페이스를 사용하자.&lt;/p&gt;

&lt;p&gt;앞에서 예로 든 포인트컷은 DAO를 직접 트랜잭션 경계로 만들었는데， 사실 이방식은 비즈니스 로직이 특별히 없어서 서비스 계층을 생략하거나 DAO 에 통합해서 만드는 단순한 애플리케이션에서나 쓸 수 있는 방법이다. 일반적으로는 데이터 액세스 계층보다는 서비스 계층의 메소드가 트랜잭션 경계가 되는 것이 자연스럽다. 하나의 단위 비즈니스 로직은 하나의 트랜잭션 안에서 동작해야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;포인트컷까지 정의했다면 다음은 어드바이저를 정의할 차례다. 
어드바이저는 포인트컷과 어드바이스를 조합해서 하나의 AOP 모ebf을 정의해주는 것이다. 
어드바이저는 &lt;aop:advisor&gt;를 사용한다. 단  &lt;aop:advisor&gt; 나 &lt;aop:pointcut&gt;은 모두&lt;/aop:pointcut&gt;&lt;/aop:advisor&gt;&lt;/aop:advisor&gt;&lt;/p&gt;
&lt;aop:config&gt; 의 내부에 정의해야 한다는 점에 주의하자. 따라서 포인트컷과 어드바 이저는 리스트 2-52와같이 &lt;aop:config&gt; 안에 넣어줘야한다.



리스트 2-52 어드바이저 정의

~~~xml
&lt;aop:config&gt;
    &amp;lt;aop :pointcut id=&quot;txPointcut&quot; expression=&quot;execution( * * . . MemberDao . *(. . ))&quot; /&amp;gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot; /&gt;
&amp;lt;/aop:config)
~~~

어드바이저는 다른 빈이나 설정에서 참조할 일이 없으므로 id를 넣지 않는다.
&amp;lt;tx:advice.로 정의한 어드바이스의 아이디와 &lt;aop:pointcut&gt;으로 정의한 포인트컷 아이디를 참조 애트리뷰트에 넣어줘야 한다.
**포인트컷이나 어드바이스가 아이디가 있다는 건 어드바이저를 여러 개 만들어서 다양한조합을할수도 있다뜻이다.** 동일한포인트컷 대상에 여러 종류의 어드바 이스를 적용한다거나 같은 어드바이스를 여러 포인트컷을 이용해서 다양한 대상에 적용할수가있다.

포인트컷이 하나의 어드바이저에만 쓰 인다면，리스트 2-53 과 같이 포인트컷 표현식을 아예 (aop:advisor&amp;gt; 에 넣고 포인트컷 정의를 생략할 수 있다. 이때는 pointcut- ref 대신 pointcut을 시용한다.



리스트 2-53 포인트컷을 내장한 어드바이저

~~~xml
&amp;lt;aop: config&amp;gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution( * * .. MemberDao. *(. . )) &quot; /&gt; 
 &amp;lt;/aop: config&amp;gt;
~~~

AOP 설정 방법에 대한 자세한 내용은 5 장을 참고하자 .







- @Transactional

  트랜잭션 AOP를 적용하는 두 번째 방법은 @Transactional 애노태이션을 이용하는 것이다. 이 접근 방법에선 설정파일 에 명시적으로 포인트컷과 어드바이스를 정의하지 않는다. 
  
  **대신 트랜잭션이 적용될 타깃 인터페이스나 클래스，메소드 등에**
  **@Transactional 애노태이션을 부여해서 트랜잭션 대상으로 지정하고 트랜잭션의 속성을제공한다.**
  @Transactional 을 사용할 때 필요한 설정은 다음 한 줄뿐이다. &amp;lt;tx: annotationdriven&amp;gt; 태그는 등록된 빈 중에서 @Transactional 이 붙은 클래스나 인터페이스 또는 메소드를 찾아 트랜잭션 어드바이스를 적용해준다.
  
  리스트 2-54는 @Transactional 이 적용된 MemberDao 인터페이스의 예다.



리스트 2-54 @Transactional이 적용된 인터페이스

~~~java
@Transactional public interface MemberDao { 
    public void add(Member m);
	public void add(List&lt;Member&gt; members);
	public void deleteAll ();
	@Transactional(readOnly=true) public long count();
}
~~~

MemberDao 인터페이스를 구현한 클래스로 선언된 빈은 인터페이스 메소드에 한해서 트랜잭션이 적용된다. 
인터페이스에 붙은 @Transactional 선언은 인터페이스 내의 모든 메소드에 적용된다. 동시에 메소드 레벨에도 @Transactional 을 지정할 수있다. 
**이때는 메소드의 선언이 인터페이스의 선언에 우선한다.**
또는 리스트 2-55 와 같이 빈의 클래스에 직접 @Transactional 을 적용할 수도 있다.





리스트 2-55 @Transactional이 적용된 클래스

~~~java
@Transactional public class MemberDaolmpl extends JdbcDaoSupport implements MemberDao (
	public void add(Member m) { ... } 
    public void add(List&amp;lt;Member) members) { ... }
	public void deleteAll() { .. . } @Transactional(readOnly=true) 
	public long count() { ... }
}
~~~

**메소드에 @Transactional 이 있으면 클래스 레벨의 @Transactional 선언보다 우선해서 적용된다.**

 클래스에 @Transactional 을 부여했을 때 트랜잭션이 적용되는 메소드는 프록시 방식과 인터페이스의 여부에 따라서 조금 달라진다.
 클래스의 @Transactional 은 인터페이스의 @Transactional 선언보다 우선한다. 
**따라서 @Transactional 을 적용하는 우선순위는 클래스의 메소드， 클래스， 인터페이스의 메소드， 인터페이스순이다.**
MemberDao 의 메소드별 트랜잭션 속성을 생각해보자. 인터페이스 레벨에 부여된 @Transactional 은 디폴트 트랜잭션 속성을 갖는다. 따라서 읽기전용 속성은 false다. 이 속성은 모든 인터페이스의 메소드에 적용된다. 하지만 count() 메소드는 메소드 레벨의 @Transactional 애노테이션을 가졌고 읽기전용 속성이 true로 되어 었으 므로， 인터페이스 레벨의 선언보다 우선해서 적용된다. 따라서 count() 메소드만 읽기전용이고， 그 밖의 메소드는 트랜잭션이 적용되기는 하나 읽기와 쓰기가 모두 가능한 트랜잭션으로 설정된다.

**@Transaction 적용 대상은 미리 결정하고 애플리케이션 안에서 통일하는 게 좋다.**

**타입 레벨과 메소드 레벨에 동시에 @Transactional 이 적용되는 경우는 종종 있다.**
**반면에 인터페이스와 클래스 양쪽에 불규칙하게 @Transactional 이 혼용되는 건 바람직하지못하다.**



**트랜잭션 경계설정 방법 두 가지는 각기 장단점이 있다. aop와 tx 스키마의 태그를 이용하는 방식은 선언이 조금 복잡해 보이지만 코드에는 전혀 영향을 주지 않고 일괄적 으로 트랜잭션을 적용하거나 변경할 수 었다는 장점이 있다. @Transactional 을 일일이 대상 인터페이스나 클래스 메소드에 부여하는 건 상대적으로 번거로운 작업이다. 반면에 @Transactional 은 aop와 tx 스키마의 태그를 사용하는 경우보다 훨씬 세밀한 설정 이가능하다.**
리스트 2-56은 get으로 시작하는 메소드에만 읽기전용 속성을 부여하고 나머지는 모두 디폴트 트랜잭션 속성을 사용하게 하는 트랜잭션 어드바이스 선언이다.



리스트 2-56 tx 스키마의 태그를 이용한 트랜잭션 속성 정의

~~~xml
&lt;tx:advice id=&quot;txAdvice&quot;&gt; 
    &lt;tx:attributes&gt; &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; /&gt;
        &lt;tx:method name=&quot;*&quot; /&gt; 
    &lt;/tx:attributes&gt; 
&lt;/tx:advice&gt;
~~~

이 방법의 장점은 트랜잭션을 적용할 대상이 아무리 늘어나도 매번 번거롭게 트랜잭션 관련 설정을 변경해주거나 추가할 필요가 없다는 것이다. 추가할 클래스와 메소드가 포인트컷에 선정 대상이 되게만 하면 된다.
@Transactional 을 사용해서 위의 &lt;tx:attributes&gt;와 동일한 트랜잭션 선언을 하려면 리스트 2-57과 같이 많은 애노테이션이 필요하다. **@Transactional 으로는 간단히 get 으로 시작하는 메소드를 모두 읽기전용으로 만들 수 있는 방법이 없다.** 
get 으로 시작 히는 모든 메소드에 일일이 @Transactional 을 부여하고 속성을 넣어서 인터페이스 레벨에 부여된 @Transactional 속성보다 우선되게 해야 한다. 그러다 보니 애노테이션이 지저분하게 반복돼서 나오는 경우가 많아진다. 
물론 모든 트랜잭션 속성을 동일하게 디폴트로 가져가면 클래스나 인터페이스에 @Transactional 하나만 붙여주변 되니 간단해 진다.
하지만 본격적인 엔터프라이즈 시스템이라면 적어도 조회전용 메소드에 읽기전용 트랜잭션 속성을 부여해서 성능을 최적화하는것이     기본이다. 그렇다면 리스트 2-57과 같이 @Transactional 이 잔뜩 붙은 인터페이스나 클래스를 피할 수 없을 것이다.	



리스트 2-'51 @Transactional을 이용한 트랜잭션 속성 정의

~~~java
@Transactional public interface IssueDao {
    public void add(Issue i);
	public void add(List&amp;lt;Issue) members);
	public void deleteAll();
	@Transactional(readOnly=true) public Issue get(int id);
	@Transactional(readOnly=true) public Issue getAll();
	@Transactional(readOnly=true) public Issue findIssuesByName(String name);
}
~~~



**이런 불편함에도 불구하고 @Transactional 은 매우 세밀하게 트랜잭션 속성을 부여 해야 할 경우라면 포인트컷과 트랜잭션 어드바이스로 한 번에 속성을 일괄 적용하는 것보다 유리하다.** 
특정 메소드만 격리수준을 변경한다거나 제한시간을 두는 등의 필요가 생겼을 때 aop와 tx 의 태그를 이용하려면 매우 복잡해진다. 단 하나의 메소드에 다른 트랜잭션 속성을 부여하기 위해 새로운 포인트컷 어드바이스 어드바이저를 지정하고 해당 메소드를 다른 포인트컷에서는 제외시켜야 하는 등의 복잡한 방법을 시용해야 한다.
**반면에 @Transactional 을 사용하면 간단히 해당 메소드의 @Transactional 애노테이션에 원하는속성을추가해주기만하면된다.**
**이 두 가지 방법은 각기 장단점이 있으므로 개발하려는 시스템의 트랜잭션 적용 전략과 필요에 잘 맞는 방법을 적절히 선택해서 사용하자.**







### 프록시 모드: 인터페이스와 클래스

스프링의 AOP는 기본적으로 다이내믹 프록시 기법을 이용해 동작한다. 다이내믹 프록시를 적용하려변 인터페이스가 있어야 한다. 인터페이스의 사용은 DI 에서도 가장 기본 원칙인 만큼문제 될 것은 없다. 
**하지만 특별한경우에 인터페이스 를구현하지 않은 클래스에 트랜잭션을 적용해야 할 수 있다.** 
인터페이스가 없는 레거시 클래스 코드를 그대로 가져다가 사용히는데 수정은 불가능하고 대신 스프링의 트랜잭션의 경계설정 대상 으로 만들고 싶다면 어떻게 해야 할까?

**이때는 스프링이 지원히는 클래스 프록시 모드를 사용하면 된다.** 
**스프링에서는 JDK 다이내믹 프록시 외에도 CGLib 라이브러리가 제공해주는 클래스 레벨의 프록시도 사용할수있다.**
**클래스 프록시는 aop/tx 스키마를 사용히는 경우와 @Transactional 을 사용하는 경우 모두 이용할수있**다.

- aop/tx 스키마 태그의 클래스 프록시 설정

  &amp;lt;aop: c on fig&amp;gt; 에는 디폴트로 false 값을 가진 proxy-target-class 애트리뷰트가 있다. 인터페이스 없이 클래스에 직접 프록시를 적용하려면 이 애트리뷰트를 true로 바꿔주변 된다. 리스트 2-58은 클래스 프록시를 이용한 트랜잭션 AOP 설정의 예다.
  
  

리스트 2• 58  스키마 태그에 설정한 클래스 프록시

~~~xml
&lt;aop:config proxy-target-class=&quot;true&quot;&gt;
       &amp;lt;aop:pointcut id=&quot;txPointcut&quot; expression=execution( * * . . MemberDaolmpl. *(. . ))&quot; /&amp;gt;
	&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot; /&gt;
  &amp;lt;/aop:config/&amp;gt;
~~~

이때 포인트컷의 선정 대상도 클래스여야 한다. 이렇게 해주면 인터페이스 없이도 클래스에 직접 적용된다.



- @Transactional의 클래스 프록시 설정

  @Transactional 을 사용하는 경우에도 다음과 같이 proxy-target-class 애트리뷰트를 true로 바꿔주변 된다.

  &lt;tx:annotation-driven proxy-target-class=&quot;true&quot; /&gt;

  

- @Transactional은 클래스에 부여해야 한다.

  클래스 프록시는 일반적으로 인터페이스를 구현하지 않는 클래스에 주로 사용된다.
  하지만 원한다면 인터페이스가 있는 클래스에 클래스 프록시를 강제로 적용할 수도

  있다. 이때는 반드시 클래스에 @Transactional 을 부여해줘야 한다. 인터페이스에 붙인 @Transactional 애노태이션은 구현 클래스로 그 정보가 전달되지 않는다. 따라서 인터페이스에만 @Transactional 을 부여하고 클래스 프록시 모드로 바꾸면 트랜잭션이적용되지않는다.

  @Transactional 을 클래스에 부여하다고 해서 클래스 프록시가 적용되는 것은 아니다. **@Transactional 이 클래스에 있어도 타깃에 인터페이스가 있고 proxy-target-class 를 디폴트 값으로 그대로 뒀다면 인터페이스에 다이내믹 프록시가 적용되니 흔동하지 않도록 주의하자.**

  

- 클래스 프록시의 제약사항을 알아야 한다

  **클래스 프록시는 final 클래스에는 적용할 수 없다.** 클래스 프록시는 타깃 클래스를 상속해서 프록시를 만드는 방법을 시용하기 때문에 상속이 불기능한 final 클래스에 는적용되지않는다.
  **클래스 프록시를 적용하면 클래스의 생성자가 두 번 호출된다**. 상속을 통해 프록 시를 만들기 때문에 발생하는 현상인데 이 때문에 생성자에서 리소스를 할당하는것 같은 중요한 작업은 피하도록 해야 한다.

  

- 불필요한 메소드에 트랜잭션이 적용할 수 있다

  클래스 프록시 방식을 사용하면 클래스의 모든 public 메소드에 트랜잭션이 적용된다. 
  인터페이스를 이용히는 경우에는 인터페이스에 정의된 메소드로 트랜잭션 적용이 제한되지만 클래스에는그런 구분을 둘수 없다.
  
  **따라서 수정자 같은， 클라이언트가 사용하지는 않지만 public 으로 정의히는 메소드에도 트랜잭션이 적용되는 문제가 발생한다.** 
  물론 아무런 DB 작업이 없으므로 그냥 빈 트랜잭션이 시작됐다가 종료 되겠지만， 그만람 시간과 리소스에 낭비가 발생한다.
  
  

**클래스 프록시는 코드를 함부로 손댈 수 없는 레거시 코드나， 여타 제한 때문에 인터 페이스를 사용하지 못했을 경우에만 사용해야 한다.**
 **인터페이스를 만들기가 귀찮다고 클래스 프록시를 시용하는 것은 스프링의 개발철학에 맞지 않는다**. 
인터페이스를 사용 히는 이유는 단지 트랜잭션 AOP를 적용히는 것이 전부가 아니다.
 비록 스프링이 런타임 바이트코드 생성 기법을 지원히는 라이브러리를 이용해서 클래스에도 프록시를 적용하도록 해주고는 있지만 이 방법을 남용히는 건 바람직하지 않다.







### AOP 방식: 프록시와 AspectJ

스프링의 AOP는 기본적으로 프록시 방식이다. 
인터페이스를 이용핸 JDK 다이내믹 프록시든 클래스에 바로 프록시를 만드는 CGLib 이든, 모두 프록시 오브젝트를 타깃 오브젝트 앞에 두고 호출 과정을 가로채서 트랜잭션과 같은 부가적인 작업을 진행해준다.

스프링의 프록시 AOP 대신 AOP 전용 프레임워크인 AspectJ의 AOP를 시용할 수있다. 
AspectJ AOP는 스프링과 달리 프록시를 타깃 오브젝트 앞에 두지 않는다. 대신 타깃 오브젝트 자체를 조작해서 부가기능을 직접 넣는 방식이다. 마치 처음부터 타깃 오브젝트의 클래스에 부가기능을 가진 소스코드가 있었던 것처럼 만들어준다. 

AspectJ AOP는 그래서 매우 강력하다. 메소드 실행 지점만 조인 포인트로 사용할 수 있는 프록시 방식의 스프링 AOP 에서는 불가능한 다양한 조인 포인트와 고급 기능을 이용할 수있다. 
대신 별도의 빌드 과정이나 바이트코드 조작을 위한 로드타임 위버 설정과 같은 부가적인작업이 필요하다.

트랜잭션 AOP를 적용하기 위해 굳이 번거롭게 AspectJ를 사용할 필요는 없다.
AspectJ AOP를 스프링과 함께 애플리케이션 전반에 걸쳐서 사용하고 있는 경우라면 물론 고려해볼 수는 있다. 
또는 다음과 같은 프록시 AOP 의 제약사항을 극복하기 위해 서라면 도입을 검토해볼 필요가 있다.

Vo l. l 에서 자세히 살펴본 것처럼 프록시는 기능을 사용하려는 오브젝트인 클라이언트와 서비스를 제공하는 오브젝트인 타깃 오브젝트 사이에 데코레이터 패턴을 써서 투명하게 추가된다. 투명하다는 건 프록시가 추가되더라도 클라이언트와 타깃 오브젝트의 코드를 수정할 필요도 없고 기본 기능에도 영향을 주지 않는다는 뜻이다. 

그림 2-2 는 프록시가 적용되기 전과 후를 보여주고 있다. 프록시는 스프링 DI 의 도움을 받아서 클라이언트와 타깃 오브젝트 사이에 추가되고， 어드바이스가 제공해주는 부가적인 기능을 타깃 오브젝트의 메소드 호출 전후에 실행해준다.



''

![image-20210820231539343](C:\Users\ST\AppData\Roaming\Typora\typora-user-images\image-20210820231539343.png)

프록시가 적용되면 클라이언트는 프록시를 타깃 오브젝트라고 생각하고 프록시의 메소드를 호출한다. 프록시는 클라이언트로부터 요청을 받으면 타깃 오브젝트의 메소드로 위임해준다. 타깃 오브젝트에 위임히는 과정에서 부가작업을 추가할 수 있다. 
트랜잭션 AOP 에 의해 추가된 프록시라면 타깃 오브젝트 메소드 호출 전에 트랜잭션을 시작하고 호출 후에 트랜잭션을 커밋하거나 롤백해줄 것이다.

여기서 프록시는 클라이언트가 타깃 오브젝를 를 호출하는 과정에서만 동작한다는 점을 주목하자. 
**타깃 오브젝트의 메소드가 자기 자신의 다른 메 소드를 호출할 때 는 어떻게 될까? 이때 도 프록시가 동작할까? 그렇지 않다.**
이미 프록시를 거쳐서 타깃 오브 젝트까지 작업 이 진행됐으므로 타깃 오브젝트에 서 자신의 메 소드를 호출할 때 는 프록 시를 거치지 않는다. 
그림 2 -3 의 @은 클라이언트에서 프록시를 통해 들어온 호출이 다. 이때는 당연히 프록시의 기능이 동작한다. 하지만 @의 경우는 타깃 오브젝트 안에 서의 호출이 므로 프록시를 통하지 않고 직접 타깃 오브젝트의 메 소드로 호출이 일어 난다.

![2](C:\Users\ST\Downloads\2.PNG)

리스트 2-5 9는 트랜잭션 AOP가 적용된 서 비 스 계층 클래스의 코드다. add () 메 소드는 트랜잭션 전파 속성이 항상 새로운 트랜잭션을 만들어 시작하도록 REQUIRES_NEW로 되어 있다. 

따라서 다른 서비스 계층 오브젝트에서 트랜잭션이 시작된 후에 MemberService의 add () 메 소드가 호출되면 기존 트랜잭션은 잠시 중단되고 새로운 트랜잭션을 시작한다. MemberService 외의 오브젝트에 서 MemberS ervi ce 의 메 소드를 호출할 때는 항상 트랜잭션 프록시를 거쳐서 들어오기 때문에 메 소드에 설정해둔 트랜책션 속성이 정확히 적용된다.



리스트 2• 59 자신을 호출하는 타깃 오브젝트

~~~JAVA
@Transact ional public class MemberService {
    @Transactional(propagation=Propagation.REQUIRES_NEW) 
    public void add(Member m) { ... }
    
	public void complexWork() (
		this.add(new Member( .. . )) ;
	}
~~~

이번엔 클라이언트로부터 complexWork () 메 소드가 호출된 경우를 생각해 보자.

complexWork() 은 클래스 레벨 @Transactional 의 적용을 받으므로 complexWork() 이 호출되기 전에 프록시에서 트랜잭션을 시작할 것이다. 

**문제는 complexWork() 에서 add( )메소드를 호출할 때다.**

- 이때는 프록시를 지나서 이미 MemberService 빈의 오브젝트로 들어왔으므로 트랜잭션 프록시를 다시 거치지 않고 add () 메소드가 바로 실행된다.
- 그래서 이때는 add( ) 메소드의 트랜잭션 속성이 반영되지 못한다. add() 를 호출했음에도 새로운 트랜잭션이 생성되는 대신 complexWork() 에서 시작된 트랜잭션에 그냥 참여하게 될 뿐이다. 

결국 add( ) 메 소드에 별도의 트랜잭션 속성을 정의해놓아도 어떤 경로를 거쳐서 이 메소드가 호출되느냐에 따라서 해당 속성이 적용될 수도 있고 안 될 수도 있다.
 만약 complexWork() 이 트랜잭션이 아예 시작되지 않도록 설정된 메소드라면 add()가 호출되어도 트랜잭션이 시작되지 않은 채로 진행될 수밖에 없다.



타깃 오브젝트의 자기 호출에는 AOP 가 적용되지 않는다는 점이 프록시 AOP 의 한계다.
**이 문제를 해결해서 complexWork() 에서 같은 오브젝트의 add() 를 호출할 때도 트랜 잭션 프록시를 거치게 하고 싶다면 두 가지 방법을 고려해볼 수 있다.**

- AopContext.currentProxy()

  프록시 설정에서 현재 진행 중인 프록시를 노출하도록 설정해두면 스프링 API를 이용해서 현재 진행 중인 프록시를 가져올 수 있다. 이 기능을 이용하면 complexWork() **메소드에서 add() 를 바로 호출하는 대신 프록시를 통해 add() 메소드를 호출할 수있다. 사용 방법도 단순하고 효과적이지만 시용을 권장할 수는 없다.** 
  **스프링 A PI 가비즈니스 로직을 가진 POJO 클래스 코드에 등장한다는 문제와 더불어， 프록시를 통하지 않고는 아예 동작하지 않는 한심한 코드가 되기 때문이다.** 이 방법을 자세히 알고 싶다면 AopContext 클래스의 currentProxy() 메소드 API 문서를 참고하라.

- AspectJ AOP

  프록시 AOP 대신 AspectJ AOP를 사용하는 방법도 있다. 
  **AspectJ는 프록시 대신 클래스 바이트코드를 직접 변경해서 부가기능을 추가하기 때문에 타깃 오브젝트의 자기 호출 중에도 트랜잭션 부가기능이 잘 적용된다**. 
  굳이 자신의 메소드를 호출하는 경우에도 트랜잭션 속성이 정확히 적용되기를 원한다면 Aspec tJ를 사용하는 편이 좋다. 스프링에서 Aspec tJ를 사용하는 데 필요한 자세한 설정 방법은 5 장을 참고 하자.

@Transactional을 시용하는 경우에는 XML 설정에 다음 코드를 넣어주면 프록시 대신 AspectJ를 시용해 트랜잭션을 적용하게 할 수 있다. &lt;tx:annotation-driven&gt; 의 mode 애트리뷰트는 디폴트 값으로 proxy를 갖고 있다. 이 값을 apsectJ 로 변경해주면 된다.

&amp;lt;tx :annotation-driven mode=‘ aspectj'/)

Aspec tJ를 시용해 트랜잭션을 적용할 때는 앞에서 설명한 것처 럼 @Transctional 을클래스 레벨과 클래스 메소드 레벨에 부여해야 한다는 점을 주의하자. AspectJ코드를 사‘용하면서 인터페이스에만 @Transactional 을 부여하면 트랜잭션이 적용되지 않는 다.

 그래서 트랜잭션 코드가 변경될 수 있다는 점을 고려한다면 @Transactional 은 안전하게 클래스에만 붙여두는 게 좋다고 볼 수도 있다. 물론 이때도 인터페이스를 정의 하고 클라이언트는 인터페이스를 통해서만 접근하도록 만들어야 한다는 원칙은 지켜 야한다.





## 2.6.3 트랜잭션속성

모든 트랜잭션이 같은 방식으로 동작히는 건 아니다. 
전체가 같이 실패하거나 성공히는 하나의 작업으로 묶인다면 점에서는 다를 바 없겠지만， 세밀히 따져보면 몇 가지 차이점이 있다. 
스프링은 트랜잭션의 경계를 설정할 때 네 가지 트랜잭션 속성을 지정할 수있다. 또, 선언적 트랜잭션에서는 롤백과 커밋의 기준을 변경하기 위해 두 가지 추가 속성을 지정할 수 있다. 선언적 트랜잭션 기준으로 보자면 모든 트랜잭션 경계는 여섯 가지 속성을갖고 있는셈이다.
트랜잭션 속성의 지정은 tx/aop 스키마의 태그를 이용히눈 경우에는 리스트 2-60과 같이 &lt;tx:method&gt; 태그의 애트리뷰트로 지정할수 있다. &amp;lt;tx: method&amp;gt; 의 애트리뷰트는 메소드 이름 패턴을 담은 name 애트리뷰트를 제외하면 모두 디폴트 값이 정의되어 있으 므로생략가능하다.



리스트 2-30 &amp;lt;tx:method〉를 이용한 트랜잭션 속성 지정

~~~xml
&lt;tx:attributes&gt;
&lt;tx:method name=&quot;&quot;&gt;
&amp;lt;read-only=&quot;&quot;&amp;gt;&amp;lt;/read-only&amp;gt;
&amp;lt;isolation=&quot;&quot; &amp;gt;&amp;lt;/read-only&amp;gt;
&amp;lt;propagation= &quot;&quot;&amp;gt;&amp;lt;/propagation&amp;gt; 
&amp;lt;timeout= &quot;&quot;&amp;gt;
&amp;lt;rollback-for=&quot;&quot;&amp;gt;&amp;lt;/rollback-for&amp;gt;
&amp;lt;no-rollback-for=&quot;&quot;/&amp;gt;
                  
&amp;lt;/tx:attributes&amp;gt;
~~~

@Transactional을 이용했을 때는 리스트 2-61 과 같이 애노테이션의 엘리먼트로 트랜잭션 속성을 지정할 수 있다.

리스트 2--61 @Transactional율 이용한 트랜잭션 속성 지정

~~~java
@Transactional(readOnly=.
isolation= .. . ,
propagat lOn= .
tlmeout= ... ,
rollbackFor= . .. , rollbackForClassName= . .. ,
noRollbackFor= ... , noRollbackForClassName= ... )
~~~

모든 엘리먼트는 디폴트 값이 정의되어 있으므로 생략 기능하다. 이제 트랜잭션 속성에 대해 자세히 알아보자.





### 트랜잭션 전파: propagation

이제 트랜잭션을 시작하거나 기존 트랜잭션에 참여히는 방법을 결정하는 속성이다. 선언적 트랜잭션 경계설정 방식의 장점은 여러 트랜잭션 적용 범위를 묶어서 커다란 트랜잭션 경계를 만들 수 있다는 점이다. 
트랜잭션 경계의 시작 지점에서 트랜잭션 전파 속성을 참조해서 해당 범위의 트랜잭션을 어떤 식으로 진행시킬지 결정할 수 있다.
스프링이 지원히는 트랜잭션 전파 속성은 다음 여섯 가지가 있다. 모든 속성이 모든 종류의 트랜잭션 매니저와 데이터 액세스 기술에서 다 지원되진 않음을 주의해야 한다.
각 트랜잭션 매니저의 API 문서에는 사용 가능한 트랜잭션 전파 속성이 설명되어 있으니 사용하기 전에 쪽 참고해봐야 한다.
&lt;tx:method&gt; 에서는 propagation 애트리뷰트 값으로 @Transactional 에서는 propagationn 엘리먼트로 지정한다. propagation 엘리먼트의 이늄 값은 org.springframework.transaction.annotation.Propgation 에 정의된 것을 시용한다.

- REQUIRED

  디폴트 속성이다. 모든 트랜잭션 매니저가 지원하며 대개 이 속성이면 충분하다.
  미리 시작된 트랜잭션이 있으면 참여하고 없으면 새로 시작한다. 자연스럽고 간단한 트랜잭션 전파 방식이지만 사용해보면 매우 강력하고 유용하다는 사실을 알 수 있다. 하나의 트랜잭션이 시작된 후에 다른 트랜잭션 경계가 설정된 메소드를 호출하면 자연스럽게 같은 트랜잭션으로 묶인다.

  

- SUPPORTS

  이미 시작된 트랜잭션이 있으면 참여하고 그렇지 않으면 트랜잭션 없이 진행하게 만든다. 트랜잭션이 없긴 하지만 해당 경계 안에서 Connection 이나 하이버네이트 Session 등을공유할수 있다.

  

- MANDATORY

  REQUIRED와 비슷하게 이미 시작된 트랜잭션이 있으면 참여한다. 반면에 트랜잭션이 시작된 것이 없으면 새로 시작하는 대신 예외를 발생시킨다. 혼자서는 독립적으로 트랜잭션을 진행하면 안 되는 경우에 사용한다.

  

- REQUIRES NEW

  항상 새로운 트랜잭션을 시작한다. 이미 진행 중인 트랜잭션이 있으면 트랜잭션을 잠시 보류시킨다. JTA 트랜잭션 매니저를 사용한다면 서버의 트랜잭션 매니저에 트랜잭션 보류가 가능하도록 설정되어 있어야한다

  

- NOT SUPPORTED

  트랜잭션을 사용하지 않게 한다. 이미 진행 중인 트랜잭션이 있으면 보류시킨다.

  

- NEVER

  트랜잭션을 사용하지 않도록 강제한다. 이미 진행 중인 트랜잭션도 존재하면 안 된다. 있다면 예외를 발생시킨다.



- NESTED

  이미 진행 중인 트랜잭션이 있으면 중첩 트랜잭션을 시작한다. 중첩 트랜잭션은 트랜잭션 안에 다시 트랜잭션을 만드는 것이다. 
  
  하지만 독립적인 트랜잭션을 만드는 REQUIRES_NEW와는 다르다.
  **중첩된 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만 자신의 커밋과 롤백은 부모트랜잭션에게 영향을주지 않는다.** 
  예를들어 어떤중요한 작업을 진행히는 중에 작업 로그를 DB 에 저장해야 한다고 해보자. 그런데 로그를 저장하는 작업이 실패하더라도 메인 작업의 트랜잭션까지 롤백해서는 안 되는 경우가 있다. 힘들게 처리한 시급한 작업을 단지 로그를 남기는 작업에 문제가 있다고 모두 실패로 만들 수는 없기 때문이다. 
  반면에 로그를 남긴 후에 핵심 작업에서 예외가 발생한다면 이때는 저장한 로그도 제거해야 한다. 
  바로 이럴 때 로그 작업을 메인 트랜잭션에서 분리해서 중첩 트랜잭션으로 만들어두면 된다. 
  **메인 트랜잭션이 롤백되면 중첩된 로그 트랜잭션도 같이 롤백되지만， 반대로 중첩된 로그 트랜잭션이 롤백 돼도 메인 작업에 이상이 없다면 메인 트랜잭션은 정상적으로 커빗된다.**
  중첩 트랜잭션은 JDBC 3.0 스펙의 저장포인트savepoint를 지원핸 드라이버와 DataSourceTransactionManager를 이용할 경우에 적용 가능하다. 
  **또는 중첩 트랜잭션을 지원하는 일부 WAS 의 JTA 트랜잭션 매니 저를 이용할 때도 적용할 수 있다. 유용한 트랜잭션 전파 방식이지만 모든 트랜잭션 매니저에 다 적용 가능한 건 아니므로，적용하려면 사용할 트랜잭션 매니저와 드라이버. WAS 의 문서를 참조해보고 미리 학습 테스트를 만들어서 검증해봐야한다.**





### 트랜잭션 격리수준: isolation

트랜잭션 격리수준은 동시에 여러 트랜잭션이 진행될 때에 트랜잭션의 작업 결과를 여타 트랜잭션에게 어떻게 노출할 것인지를 결정히는 기준이다. 
스프링은 다음 다섯 가지 격리수준속성을지원한다. 격리수준은 (tx:method) 의 isolation 애트리뷰트와 @Transactional 의 isolation
엘리먼트로지정할수있다 .

- DEFAULT

  사용하는데이터 액세스기술또는 DB 드라이버의 디폴트설정을따른다. 보통 드라이버의 격리수준은 DB 의 격리수준을 따르는 게 일반적이다. 
  대부분의 DB는 READ_COMMITTED를 기본 격리수준으로 갖는다. 하지만 일부 DB는 디폴트 값이 다른 경우도 있으므로 DEFAULT를 사용할 경우에는 드라이버와 DB 의 문서를 참고해서 디폴트 격리수준을확인해야한다 .

  

- READ UNCOMMITTED

  가장 낮은 격리수준이다. 하나의 트랜잭션이 커밋되기 전에 그 변화가 다른 트랜잭션에 그대로 노출되는 문제가 있다. 하지만 가장 빠르기 때문에 데이터의 일관성이 조금 떨어지더라도 성능을 극대화할 때 의도적으로 사용하기도 한다.

  

- READ COMMITTED

  실제로 가장 많이 사용되는 격리수준이다. 물론 스프링에서는 DEFAULT로 설정해둬도 DB 의 기본 격리수준을 따라서 READ_COMMITTED로 동작히는 경우가 대부분이므로 명시적으로 설정하지 않기도 한다. **READ_UNCOMMITTED와 달리 다른 트랜잭션이 커밋하지 않은 정보는 읽을 수 없다.** **대신 하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정할 수 있다.** **이 때문에 처음 트랜잭션이 같은 로우를 다시 읽을 경우 다른 내용이 발견될수있다 .**

  

- REPEA TABLE READ

  **하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정하는 것을 막아준다.** **하지만 새로운 로우를 추가하는 것은 제한하지 않는다.** 따라서 SELECT로 조건에 맞는 로우를 전부 가져오는 경우 트랜잭션이 끝나기 전에 추가된 로우가 발견될 수 있다.

  

- SERIALlZABLE

  가장 강력한 트랜잭션 격리수준이다. **이름 그대로 트랜잭션을 순차적으로 진행시켜 주기 때문에 여러 트랜잭션이 동시에 같은 테이블의 정보를 액세스하지 못한다.** 가장 안전한 격리수준이지만 가장 성능이 떨어지기 때문에 극단적으로 안전한 작업이 펼요한 경우가 아니라면 자주 사용되지 않는다.



### 트랜잭션 제한시간: timeout

이 속성을 이용하면 트랜잭션에 제한시간을 지정할 수 있다. 값은 초 단위로 지정한다.
디폴트는 트랜잭션 시스템의 제한시간을 따르는 것이다. 트랜잭션 제한시간을 직접 지정하는 경우 이 기능을 지원하지 못하는 일부 트랜잭션 매니저는 예외를 발생시킬 수있다.
XML에서는 &amp;lt;tx:method) 의 timeout 애트리뷰트를 이용하고 @Transactional 애노 테이션에서는 timeout 엘리먼트로 지정할 수 있다.



### 읽기전용 트랜잭션: read-only. readOnly

트랜잭션을 읽기전용으로 설정할 수 있다. 성능을 최적화하기 위해 사용할 수도 있고 특정 트랜잭션 작업 안에서 쓰기 작업이 일어나는 것을 의도적으로 방지하기 위해 사용할 수도 있다. 트랜잭션을 준비하면서 읽기전용 속성이 트랜잭션 매니저에게 전달된다.
그에 따라 트랜잭션 매니저가 적절한 작업을 수행한다. 그런데 일부 트랜잭션 매니저의 경우 읽기전용 속성을 무시하고 쓰기 작업을 허용할 수도 있기 때문에 주의해야 한다.

일반적으로는 읽기전용 트랜잭션이 시작된 이후 INSERT, UPDATE , DELETE 같은 쓰기 작업이 진행되면 예외가 발생한다.
aop/tx 스키마로 트랜잭션 선언을 할 때는 이름 패턴을 이용해 읽기전용 속성으로 만드는 경우가 많다. 보통 get 이나 find 같은 이름의 메소드를 모두 읽기전용으로 만들어 시용하면 편리하다. @Transactional 의 경우는 각 메소드에 일일이 읽기전용 지정을 해줘야한다.
read-only 애트리뷰트 또는 readOnly 엘리먼트로 지정한다.



### 트랜잭션 롤백 예외: rollback-for, rollbackFor, rollbackForClassName

**선언적 트랜잭션에서는 런타임 예외가 발생하면 롤백한다.** 
**반면에 예외가 전혀 발생하지 않거나 체크 예외가 발생하면 커밋한다.**
체크 예외를 커밋 대상으로 삼은 이유는 체크 예외가 예외적인 상황에서 사용되기보다는 리턴 값을 대신해서 비즈니스적인 의미를 담은 결과를 돌려주는 용도로 많이 사용되기 때문이다. 
스프링에서는 데이터 액세스 기술의 예외는 런타임 예외로 전환돼서 던져지므로 런타임 예외만 롤백 대상으로 삼은 것이다.
하지만 원한다면 기본 동작방식을 바꿀 수 있다. 
**체크 예외지만 롤백 대상으로 삼아야 히는 것이 있다면 XML의 rollback-for 애트리뷰트나 애노태이션의 rollbackFor 또는 rollbackForClassName 엘리먼트를 이용해서 예외를 지정하면 된다.**

rollback-for 나 rollbackForClassName은 예외 이름을 넣으면 되고, rollbackFor는 예외 클래스를 직접 넣는다.
&lt;tx:method&gt; 라연 다음과 같이 지정하면 된다.
&amp;lt;tx:method name=&quot;get*“ read-only=&quot;true&quot; rollback-for=&quot;NoSuchllemberException&quot;/&amp;gt;
@Transactional 에서는 다음과 같이 클래스 이름 대신 클래스를 직접 사용해도 된다.
@Transactional(readOnly=true , rollbackFor쾌oSuchllemberException.class)



### 트랜잭션 커밋 예외: no-rollback-for, noRollbackFor, noRollbackForClassName

rollback-for 속성과는 반대로 기본적으로는 롤백 대상인 런타임 예외를 트랜잭션 커밋 대상으로 지정해준다.
사용 방법은 rollback-for와 동일하다.







**이 여섯 가지 트랜잭션 속성은 모든 트랜잭션 경계설정 속성에 사용할 수 있다. 하지만 모든 트랜잭션마다 일일이 트랜잭션 속성을 지정하는 건 매우 번거롭고 불편한 일이다.** 
세밀하게 튜닝해야 하는 시스템이 아니라면 메소드 이름 패턴을 이용해서 트랜잭션 속성을 한 번에 지정하는 aop/tx 스키마 태그 방식이 편리하다. 보통은 read-only 속성 정도만 사용하고 나머지는 디폴트로 지정하는 경우가 많다. 세밀한 속성은 DB나 WAS 의 트랜잭션 매니저의 설정을 이용해도 되기 때문이다.
**세밀한 트랜잭션 속성 지정이 필요한 경우에는 @Transactional 을 사용히는 편이 좋다. 대신 트랜잭션 속성이 전체적으로 어떻게 지정되어 있는지 한눈에 보기 힘들다는 단점이 있고， 개발자가 코드를 만들 때 트랜잭션 속성을 실수로 잘못 지정히는 등의 위험이 있기 때문에 사전에 트랜잭션 속성 지정에 관한 정책이나 가이드라인을 잘 만들어 둬야한다.**













## 2.6.4 데이터 액세스 기술 트랜잭션의 통합

스프링은 자바의 다양한 데이터 액세스 기술을 위한 트랜잭션 매니저를 제공해준다. 트랜잭션 매니저를 빈으로 등록하고 선언적인 방식의 트랜잭션 관리 기능에서 사용하게 한다. 
트랜잭션 매니저 빈의 이름은 관례적으로 transactionManager를 사용한다. 트랜잭션 매니저 를 참조하는 전용 태그에서는 참조 애트리뷰트에  이름이 디폴트로 선언 되어 있기 때문에 생략할수도 있다. 
여러 개의 DB를 독립적으로사용하지 않는한 트랜잭션 매니저는 한 개만 사용할수 있다.
**그런데 DB는 하나이지만 두 가지 이상의 데이터 액세스 기술을 동시에 사용하는 경우는 어떨까?** 
예를 들면 각각 JDBC와 iBatis로 만든 DAO를 동시에 사용한다거나, jPA와 JDBC 또는 하이버네이트와 iBatis를 함께 사용하는 경우는 어떨까? 
여기서 함께 시용한다는 건， 두 개 이상의 기술을 사용해서 만든 DAO를 하나의 트랜잭션 안에서 사용한다는 뜻이다. 
예를 들면 jPA DAO로 일부 엔티티-테이블을 업데이트히는 것과 JDBC DAO로는 복잡한 DB 전용 쿼리를 사용해 데이터를 가져오는 것을 하나의 트랜 잭션 안에서 진행시키고 싶을 수 있다.

**물론 가능하면 애플리케이션의 데이터 액세스 기술과 방식은 한 가지로 통일하는 게좋다. 하지만 때로는 두 가지 이상의 데이터 액세스 기술을 혼합해서 사용해야 할 경우도 없지 않다.** 
현재 사용히는 데이터 액세스 기술과는 다른 기술을 시용하는 다른 시스 탱에서 개발된 DAO를 가져와 시용하고 싶을 수도 있고 jPA 나 하이버네이트를 기본 적으로 사용하지만 DB 전용 네이티브 SQL을 시용하고 싶은 경우도 있다. 

물론 jPA나 하이버네이트에서도 일반 SQL을 사용해 쿼리를 작성할 수 있다. 하지만 SQL을 본격 적으로 사용하려고 하면 iBatis 나 스프링 JDBC를 사용하는 것이 편리하다.
스프링은 두 개 이상의 데이터 액세스 기술로 만든 DAO를 하나의 트랜잭션으로 묶어서 사용하는 방법을 제공한다. 물론 이때도 DB 당 트랜잭션 매니 저는 하나만 사용한 다는 원칙은 바뀌지 않는다. 대신 하나의 트랜잭션 매니저가 여러 개의 데이터 액세스 기술의 트랜잭션 기능을 지원해주도록 만드는 것이다.









### 트랜잭션 매니저별 조합 가능 기술

트랜잭션 통합이 가능한 데이터 액세스 기술의 조합을 살펴보자. 
트랜잭션 매니저는 하나만 사용되므로 각 트랜잭션 매니저별로 사용 가능한 기술을 알고 있으면 적절한 기술과 트랜잭션 매니저의 선택이 가능할 것이다.

- DataSourceTransactionManager

  DataSourceTransactionManager를 트랜잭션 매니저로 등록하면 JDBC와 iBatis 두가지 기술을 함께 사용할 수 있다. 
  트랜잭션을 통합하려면 항상 동일한 DataSource를 사용해야 한다는 점을 잊지 말자.
  그림 2-4는 두 가지 기술이 적용된 빈과 DataSource 트랜잭션 매니저의 의존관계다. JDBC DAO와 iBatis DAO 가 같은 DataSource를 사용하도록 만들어주기만 하면 된다. **DataSourceTransactionManager는 DataSource로부터 Connection 정보를 가져와 같은 DataSource를 사용하는 JDBC DAO와 iBatis DAO 작업에 트랜잭션 동기화 기능을 제공한다.**

![3](C:\Users\ST\Downloads\3.PNG)







- JpaTransactionManager

  JPA 의 트랜잭션은 JPA API를 이용해 처리된다. 따라서 기본적으로는 JPA 단독으로 트랜잭션을 관리하게 된다. 그런데 스프링에서는 JPA 의 EntityManagerFactory가 스프링의 빈으로 등록된 DataSource를 사용할 수 있다. 
  그리고 이 DataSource를 JDBC DAO 나 iBatis DAO 에서도 시용할 수 있다. 
  **이렇게 같은 DataSource를 공유하게 해 주변 JPA 의 트랜잭션을 담당하는 JpaTransactionManager 에 의해 세 가지 기술을 이용하는 DAO 작업을 하나의 트랜잭션으로 관리해줄 수 있다.**
  JpaTransactionManager를 통해 JPA 가 사용하는 트랜잭션을 같은 DataSource를 의존하고 있는 JDBC DAO와 iBatis DAO 에 동기화해주는 것이다.
  그림 2-5 는 JpaTransactionManager를 사용할 때 세 가지 기술의 DAO 가 하나의 트랜잭션으로 통기화되는 구조를 나타낸다. **JpaTransactionManager 는 직접 DataSource 를 의존하고 있지는 않지만 EntityManagerFactory 가 사용하는 DataSource를 이용해 트랜잭션 동기화를 해준다. 이 덕분에 같은 DataSource를 사용하는 JDBC , iBatis DAO와도 트랜잭션을 통합할 수 있는 것이다.**

![4](C:\Users\ST\Downloads\4.PNG)

- HibernateTransactionManager

  하이버네이트 DAO를 사용한다면 HibernateTransactionManager를 트랜잭션 매니저로 등록해야 한다. HibernateTransactionManager도 JpaTransactionManager
  와 통일한 방식을 이용해서 SessionFactory와 같은 DataSource를 공유하는 JDBC , iBatis DAO와 트랜잭션을 공유하게 해준다. 따라서 하이버네이트 JDBC, iBatis 세 가지 기술의 DAO를 통합해서 사용할 수 있다.
  그림 2-5 에서 EntityManagerFactory 대신 SessionFactory 를，
  JpaTranasctionManager 대신 HibernateTransactionManager를 대입하면 그 구조와 의존관계를 파악할 수 있을 것이다



- JtaTransactionManager

  서버가 제공히는트랜잭션 서비스를 JTA를통해 이용하면 모든종류의 데이터 액세스 기술의 DAO 가 같은 트랜잭션 안에서 동작하게 만들 수 있다. 
  JTA는 같은 DB 에대해 다른 기술을 시용할 때뿐 아니라 다른 DB를 사용하는 DAO도 하나의 트랜잭 션으로 묶어줄 수 있다. 
  가장 강력하고 펀리한 기능이지만 JTA 서버환경을 구성해야 하고 서버의 트랜잭션 매니저와 XA를 지원하는 특별한 DataSource를 구성하는 등의 부가적인 준비 작업이 필요하다.
  단지 하나의 DB 를 사용하는 여러 가지 기술의 트랜잭션을 통합하려고 한다면 JTA를 사용해야 할 이유는 없다. 반면에 하나 이상의 DB 또는 JMS와 같은 트랜잭션이 지원되는 서비스를 통합해서 하나의 트랜잭션으로 관리하려고 할 때는 JTA 가반드시필요하다.





### ORM과 비 ORM DAO를 함께 사용할 때의 주의사항

JPA나 하이버네이트 같은 엔티티 기반의 ORM 기술과 JDBC , iBatis 같은 SQL 기반의 비 ORM 기술을 함께 시용하고 하나의 트랜잭션으로 묶어서 시용하는 것은 기술적 으로 볼 때 아무런 문제가 없다. 
하지만 각 기술의 특정을 잘 이해하지 않으면 예상치 못한 오류를 만날 수 있다.
JPA와 JDBC를 사용해서 만든 리스트 2-62 와 리스트 2-63 같은 두 개의 DAO 가있다고해보자.

리스트 2-62 JPA DAO

~~~JAVA
public class MemberJpaDao (
 @PersistenceContext EntityManager entityManager;
public void add(Member m) {
    entityManager.persist(m);
}
}
~~~

리스트 2-63 JDBC DAO

~~~JAVA
public class MemberJdbcDao extends JdbcDaoSupport {
    
SimpleJdbclnsert insert;
protected void initTemplateConfig() {
    insert = new SimpleJdbclnsert(getDataSource()).withTableName( &quot;TEST&quot; );
public void add(Member m) {
	insert.execute(new BeanPropertySqlParameterSource(m));
}
public long count() {
    return getJdbcTemplate().queryForObject(&quot;select count(*) from member&quot; , Long.class).longValue();}
}
~~~



각기 다른 기술을 사용하는 이 두 개의 DAO가 하나의 트랜잭션 안에서 동작하도록 설정해준다. 
그리고 리스트 2-64와 같은 코드를 트랜잭션 안에서 실행하면 어떤 결과가 나올지예측해보자.

리스트 2-34 두 개의 DAO를 사용하는 코드

~~~java
jdbcDao.add(new Member(l , &quot;Spring&quot; , 1.2));
jpaDao.add(new Member(2, &quot;Jpa&quot; , 1.2));
int count = jdbcDao .count();
~~~

먼저 JDBC DAO를 시용해서 Member 하나를 추가하고 다음은 JPA DAO를 이용해서 또 다른 Member를 추가했다. 그러고 나서 Member 태이블의 로우의 개수를 가져오는 쿼리를 이용해서 등록된 Member 의 개수를 가져왔다. Member를 두 번 추가했으니 처음에 테이블이 비어 있었다면 당연히 count 는 2 가 돼야 한다. 

**하지만 이 코드를 실행해보면 count 에 1이 들어 있음을 알게 된다.** 
같은 트랜잭션 안에서 동작하게 했고 각각 INSERT 문장을 실행히는 메소드를 호출했는데 왜 두 번 추가한 Member 의 개수가 1 이라고 나오는것일까?
그 이유는 JPA와 같은 ORM과 JDBC API를 직접 사용하는 비 ORM 의 특성이 다르기 때문이다.
JPA 나 하이버네이트는 단순히 JDBC API 를 간접적으로 실행해주는 방식이 아니다.
물론 jPA 나 하이버네이트에서 새로 만든 오브젝트에 영속성을 부여해주변 결국 INSERT 문이 생성돼서 DB로 전달되기는 할 것이다. 
하지만 영속성을 부여하는 persist() 나 save( ) 같은 메소드를 호출한다고 바로 DB 에 INSERT SQL이 전달되는 것이 아니다.
JPA 나 하이버네이트는 새로 등록된 오브젝트를 일단 엔티티 매니저나 세션에만 저장해 둔다. 

**엔티티 매니저나 세션을 1 차 캐시라고도 부르기 때문에 이렇게 저장해두는 것을 캐싱caching한다고 말하기도 한다. 캐싱을 한다는 의미는 DB 에 INSERT하는 것을 최대한 지연시킨다는 뜻이다.**

일단 persist() 로 등록했지만 트랜잭션이 끝나기 전에 다시 변경될 수도 있기 때문이다. 따라서 DB 에 동기화가 필요한 시점, 예를 들어 트랜잭션이 종료되거나 등록된 엔티티가 반영돼야만 정상적인 결과가 나올 수 있는 쿼리가 실행될 때까지는 실제 DB로 등록하는 것을 지연시키는 기법을 사용한다. 간단한 캐시이긴 하지만, 나름 성능 향상을 가져올 수 있고 코드를 유연하게 만들 수 있는 유용한 방법이다.
문제는 이 때문에 MemberJpaDao 의 add() 에서 entityManager.persist() 를 실행했다고 해도 바로 DB 에는 INSERT 문이 전달되지 않는다는 점이다. 
**단지 메모리의 캐시에 저장되어 있을 뿐이다. JPA 입장에서는 작업이 모두 끝나고 트랜잭션이 커밋되는 순간**
**INSERT 문을 만들어 DB 에 저장을 시도할 것이다.**
그런데 JDBC 에서는 lPA 의 그런 사정을 알지 못한다. 따라서 JDBC는 count() 메소드가 실행되면 그 순간 DB 에 바로 조회용 SQL을 보내서 현재 테이블에 등록된 로우의 개수를 가져온다. 따라서 lPA 의 캐시에만 있고 DB 에는 반영되지 않은 두 번째 add() 의 결과는 나타나지 않는 것이다.
원래 lPA 나 하이버네이트는 JDBC 등과 함께 사용하도록 설계된 게 아니기 때문에 이런 문제가 발생한다. 따라서 ORM과 비 ORM 기술을 함께 사용할 때 상당히 주의를 기울여야 한다. DAO를 이용하는 서비스 계층의 코드는 사실 DAO 가 어떤 기술로 만들어졌는지를 알지 못한다. 따라서 별 의심 없이 위와 같은 코드를 그냥 작성해버리기 쉽다.

그렇다면 이 문제를 어떻게 풀어야 할까?
해결 방법은 한 가지뿐이다. lPA나 하이버네이트의 I 차 캐시에 저장됐지만 DB 에는 아직 반영되지 않은 엔티티가 있다면 관련 테이블을 참조하는 JDBC DAO나 iBatis DAO를 바로 이용하면 안 된다. 따라서 JDBC DAO의 쿼리를 사용하려면 JPA나 하이버네이트의 1차 캐시의 내용을 먼저 DB 에 반영해야 한다.
**가장 단순한 해결책은 lPA 의 저장이나 수정 작업을 한 후에는 강제로 캐시의 내용을 DB로 보내주는 EntityManager나 Session 의 flush() 메소드를 사용하는 것이다. 리스트 2-65 에서는 MemberJpaDao 의 메소드를 이 방식으로 동작하도록 수정했다.**



리스트 2-35 flush() 사용

~~~java
public void add(Member m) {
    entityManager.persist(m);
	entityManager.flush();
}
~~~

**flush( ) 메소드는 현재 캐시의 내용을 즉시 DB 에 반영한다.** 
따라서 JDBC DAO 의 add( ) 메소드를 실행했을 때처럼 바로 INSERT 문이 DB로 전달되어 새로운 레코드가 추가된다. 
**이렇게 해두면 이후에 JDBC DAO에서 Member 테이블에 count() 쿼리를 실행 해도 JPA 에서 진행한 작업까지 모두 반영된 결과를 가져올 수 있다.**

이렇게 add() 나 merge( ) 등에서 항상 flush( )를 사용하도록 만들면 간단히 문제를 해결할 수 있긴 하지만, 
**반면에 jPA나 하이버네이트 입장에서는 1차 캐시의 장점을 희생해야 한다.** 
**JDBC DAO를 함께 사용하지 않고 jPA만 사용히는 비즈니스 로직에서도 항상 flush( )를 쓴다는 것은 손해다.** 
또， JPA나 하이버네이트에서는 persist() 나 merge( )를 명시적으로 호출하지 않아도 DB 에서 가져온 엔티티 오브젝트는 필드를 수정하는 것만으로도 UPDATE 가 일어나는 수정이 된다는 문제가 있다. 

이런 경우에도 의도 적으로 flush() 를 수행해줘야 한다. 따라서 코드가 지저분해질 뿐만 아니라， DAO의 시용 기술을 의식해서 서비스 계층의 코드를 만들어야 한다는 문제점도 있다.
**또 다른 접근 방법은 JDBC 의 DAO 가 호출될 때 JPA 나 하이버네이트의 캐시를 flush( ) 하도록 만들어주는 것이다.** 

AOP를 이용하면 lPA/하이버네이트 캐시의 flush( )를 호출해주는 부가기능을 JDBC DAO 에 간단히 추가해줄 수 있다. 이렇게 해두면 **JDBC DAO를 시용하지 않고 JPA DAO만 이용하는 경우에는 jPA 캐시를 효과 적으로 활용할 수 있고， JDBC DAO를 함께 사용할 때도 데이터의 정확성을 보장해줄 수있다.**





## 2.6.5 JTA를 이용한 글로벌/분산 트랜잭션

한 개 이상의 DB 나 JMS 의 작업을 하나의 트랜잭션 안에서 동작하게 하려면 서버가 제공히는 트랜잭션 매니저를 JTA를 통해 사용해야 한다. 
스프링에서는 서버에 설정해둔 XA DataSource와 트랜잭션 매니저 그리고 UserTransaction 등을 JNDI를 통해 가져와 모든 데이터 액세스 기술에서 사용할 수 있다. 
JTA와 분산/글로벌 트랜잭션을 사용하기 위한 설정은 자바서버마다 다르므로 해당 서버의 매뉴얼을 참고해서 등록하는 방법을 알아둬야한다.

리스트 2-66 JTA를 적용한 설정

~~~xml
&amp;lt;jee: jndi -lookup id=&quot;dataSource1&quot; jndi-name=&quot;jdbc/xaDS1&quot; /&amp;gt;
&lt;bean id=&quot;memberDao&quot; class=&quot; ... MemberDao&quot;&gt; 
	&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource1&quot; /&gt;
&lt;/bean&gt;

&lt;jee:jndi-lookup id=&quot;dataSource2&quot; jndi-name=&quot;jdbc/xaDS2&quot; /&gt; 
	&lt;bean id=&quot;usageDao&quot; 뎌=&quot;&quot; c=&quot;&quot; lass=&quot; ....UsageDao.. &quot;&gt;
		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource2&quot; /&gt; 
	&lt;/bean&gt;


&lt;bean id=&quot;txManager&quot; class=&quot;org. springframework.transaction.jta.JtaTransactionManager&quot; /&gt;
~~~



이 설정에는 두 개의 DataSource 타입 빈이 등장한다. **이 두 개의 DataSource 빈은 스프링 안에서 만들어지는 게 아니라 서버에서 제공해주는 DataSource를 JNDI로 가져온 것이다**. 
**서버에는 분산 트랜잭션을 위한 XA 프로토콜을 지원하는 XA DataSource 두 개가 jdbc/xaDSl 과 jdbc/xaDS2 라는 JNDI 이름으로 둥록되어 있어야 한다.** 

이 두개의 DataSource를 사용하는 DAO도 각각 등록해준다. DAO 의 데이터 액세스 기술은 어떤것이든상관없다.
마지막으로 JtaTransactionManager를 빈으로 등록한다. 
JtaTransactionManager는 여타 트랜잭션 매니저와는 다르게 프로퍼티로 DataSource 나 SessionFactory 등의 빈을 참조하지 않는다. 

대신 서버에 등록된 트랜잭션 매니저를 가져와 JTA를 이용해서 트랜잭션을 관리해줄 뿐이다. 이미 서버의 JTA 서비스에는 JNDI로 가져온 두 개의 XA DataSource 가 등록되어 있을 것이다. JTA는 서버에서 미리 설정해두기만 하면 스프링 에서 사용하는 것은 어떤 트랜잭션 매니저보다 간단하다.

**JtaTransactionManager는 JNDI 를 통해 JTA TransactionManager 와 JTAUserTransaction을 찾아온다.** 
이때 사용하는 JNDI 이름은 WAS 에서 자주 사용되는 기본적인 이름을 이용한다.
UserTransaction은 &quot;java:comp/UserTransaction&quot; 을 사용하고， 
TransactionManager는 &quot;java:comp/TransactionManager&quot; , &quot;java:appserver/TransactionManager&quot; ’&quot;java:pm/TransactionManager&quot; ’ &quot;java: /TransactionManager&quot; 네 가지 이름을 시도해서 가장 먼저 발견되는 것을 사용한다.
기본 이름이 아닌 JNDI 이름으로 UserTransaction 이나 TransactionManager 가 등록되어 있다면 JtaTransactionManager 의 transactionManagerName 과 userTransactionName 프로퍼티를 이용해서 JNDI 이름을 지정해줘야 한다.





### 독립형 JTA 트랜잭션 매니저

JTA는 WAS 가 제공하는 서비스를 이용하는 경우가 일반적이지만, 원한다면 서버의 지원 없이도 애플리케이션 안에 JTA 서비스 기능을 내장허는 독립형 JTA 방식으로 이용할 수 있다. 

**이 방식을 사용하면 JTA를 지원히는 WAS 가 아닌 톰켓과 같은 서블릿 컨테이너에서도 JTA 기능을 이용하는 것이 가능하다**. 

**서버에 포함돼서 서비스로 동작하는 것은아니지만 JTA의 다중트랜잭션 리소스를 위한글로벌 트랜잭션 기능을활용할수 있다.** 

- 스프링 안에서 간단한 설정을 추가하는 것만으로 JTA 의 기능을 시용할 수 있다는 점에서 매력적이다.
  독립형 JTA 트랜잭션 매니저는 ObjectWeb의 JTA 엔진인 JOTM 과 Atomikos의 TransactionalEssentials가 대표적이다. 
  두가지 모두 오픈소스 제품이므로 자유롭게 가져다 쓸 수 있다. Atomikos 에서는 오픈소스 외에도 고급 기능을 가진 상용 제품인 ExtremeTransactions를 판매하기도 한다.

  

이 두 가지 모두 스프링의 JtaTransactionManager와 결합해서 JTA 트랜잭션 서비스로 사용할수있다.
Atomikos 의 TransactionalEssentials를 스프링에 적용한 예를 살펴보자.
**먼저 리스트 2-67 과 같이 Atomikos 의 JTA TransactionManager 와 JTA UserTransaction을 빈으로 등록한다.** 
**이 두 가지 JTA 서비스는 서버에서 제공해주지 않기 때문에 스프링의 빈으로 등록해서 서비스를 이용해야 한다.** 

스프링의 트랜잭션 매니저와 여기서 사용한 JTA 트랜잭션 매니저는 다른 것이므로 혼동해서는 안 된다. 
스프링의 JtaTransactionManager는 JTA 트랜잭션 매니저를 스프링 애플리케이션이 이용 하게 해주는 트랜잭션 추상화를 위한 클래스일 뿐이다.



리스트 2-ff1 JTA 트랜잭션 매니저와 사용자 트랜잭션 등록

~~~xml
&lt;bean id=&quot;atomikosTransactionManager&quot; class=&quot;com.atomikos.icatch . jta.UserTransactionManager&quot; lmtMethod=&quot;init&quot; destroy-method=&quot;close&quot;&gt;
&lt;property name=&quot;forceShutdown&quot;&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;atomikosUserTransaction&quot; class=&quot;com.atomikos.icatch.jta.UserTransactionlmp&quot;&gt;
&lt;property name=&quot;transactionTimeout&quot;&gt;&lt;value&gt;300&lt;/value&gt;&lt;/property&gt; 
&lt;/bean&gt;
~~~



다음은 리스트 2 -68과 같이 스프링 JtaTransactionManager를 등록하고 서벼의 트랜잭션 서비스 대신 앞에서 빈으로 빈으로 등록해둔 Atomikos JTA 서비스를 이용하도 록프로퍼티를설정해줘야한다.

리스트 2-58JTATransactionManager 등록

~~~xml
&amp;lt;bean id=“transactionManager&quot; class=&quot;org. springframework. transaction. j ta. JtaTransactionManager&quot;&amp;gt; &lt;property name=&quot;transactionManager&quot; ref=&quot;atomikosTransactionManager&quot; /&gt; &lt;property name=&quot;userTransaction&quot; ref=&quot;atomikosUserTransaction&quot; /&gt; &amp;lt;/bean&amp;gt;
~~~







다음은 XA를 지원하는 DataSource를 빈으로 등록할 차례다. 
글로벌/분산 트랜잭션을 사용히는 만큼 여러 개의 DB를 사용하도록 하나 이상의 DataSource를 등록한다.
**DataSource는 JTA 트랜잭션 매니저와 XA 프로토콜을 통해 트랜잭션이 동작하도록 만들어야 한다.** 
따라서 일반 DataSource 대신 XA를 지원하는 XA DataSource를 사용해야 한다. 
**Atomikos는 XA 지원 드라이버 를 사용할 수도 있고. XA를 지원하지 않는 드라이버를 Atomikos 의 도웅을 통해 XA 드라이버처럼 사용하게 만들 수도 있다.** 
여기서는 MySQL 이 제공히는 XA DataSource 인 MysqlXADataSource를 사용해보겠다.
먼저 리스트 2-69와 같이 첫 번째 DB를 위한 DataSource를 등록해보자. JTA 에서 사용할 DataSource 에는 고유한 리소스 이름을 지정해줘야 한다.



리스트 2• 39 XA DataSource 등록

~~~xml
&amp;lt;bean id=&quot;dataSource1&quot; class=“ com.atomikos.jdbc .AtomikosDataSourceBean&quot;
init-method=&quot;init&quot; destroy캐lethod=&quot;close&quot;&amp;gt; 
&lt;property name=&quot;uniqueResourceName&quot; value=&quot;MySQLXA1&quot; /&gt;
&amp;lt;property name=&quot;xaDataSourceClassName&quot; value=&quot;com .mysql. j dbc. j dbc2 .optional.MysqlXADataSource“ /&amp;gt; 
&lt;property name=&quot;xaProperties&quot;&gt; 
&lt;props&gt; 
	&lt;prop key=&quot;user&quot;&gt;jtauser&lt;/prop&gt; 
    &lt;prop key=&quot;password&quot;&gt;jtapassword&lt;/prop&gt; 
     &lt;prop key=&quot;url&quot;&gt;jdbc :mysql :/localhost/tx1&lt;/prop&gt; 
&lt;/props&gt;
&lt;/property&gt; 
&lt;property name=&quot;poolSize&quot; value=&quot;l&quot; /&gt; &amp;lt;/bean&amp;gt;
~~~

같은 방법으로 리스트 2-70과 같이 두 번째와 세 번째 DataSource를 등록한다.



리스트 2-70 나머지 XA DataSource 등록

~~~xml
&lt;bean id=&quot;dataSource2&quot; class=&quot;com.atomikos.jdbc.AtomikosDataSourceBean&quot;&gt; 
    &lt;property name=&quot;uniqueResourceName&quot; value=&quot;MySQLXA2&quot; /&gt;
&lt;/bean&gt;
&lt;bean id=&quot;dataSource3&quot; class=&quot;com.atomikos.jdbc.AtomikosDataSourceBean&quot;&gt; 
  &lt;property name=&quot;uniqueResourceName&quot; value=&quot;MySQLXA3&quot; /&gt;
&lt;/bean&gt;
~~~



이제 각각의 데이터 소스를 사용하는 JDBC DAO나 iBatis SqlMapClient 또는
JPA EntityManagerFactory. 하이버네이트 SessionFactory를 등록하고 DAO를 만든다. 이때 각 데이터 액세스 기술에서 사용되는 DataSourceTransactionManager 나
JpaTransactionManager 같은 트랜잭션 매니저는 등록할 멸요가 없다.
이제 모든 준비가 묻났다. 세 가지 DB를 사용하는， 다른 기술로 만들어진 DAO들이 JTA를 통해 하나의 트랜잭션 안에서 동작함을 확인할 수 있을 것이다. 이렇게 3 개의 DB를 시용하는 JTA 설정과 학습 태스트는 예제 코드의 tx/JtaTxTest ，j ava와 tx/
jtatxtest-context ， xml에 나와 있으니 참고하기 바란다.







### WAS 트랜잭션 매니저의 고급 기능 사용하기

스프링의 JtaTransactionManager는 JTA 의 표준 스펙을 따르는 API를 사용해 트랜잭션을 관리한다. 그런데 WebLogic 이나 OC4J. WebSphere 등의 고급 WAS 에서는 표준 JTA는 지원하지 않는. WAS 가 제공하는 고급 트랜잭션 기능을 활용할 수 있다.
WAS 별 전용 트랜잭션 매니저를 살펴보자.	

- WebSphereUowTransactionManager

  WebSphereUowTransactionManager를 JtaTransactionManager 대신 사용하면 IBM
  WebSphere 의 UOWManager를 통해서 WebSphere 가 제공히는 트랜잭션 서비스의 기능을 최대한 활용할 수 있다. 
  **IBM WebSphere 팀의 공식적인 기술지원을 통해서 개발된 만큼 안정성을 보장받을 수 있다.** 
  **JTA 에서 기본적으로 보장되지 않는 트랜잭션 일시중단 기능이 제공되며 ， 이를 통해 REQUIRES_NEW 같은 트랜잭션 전파속성을 사용할수있다 .**

- WebLogicJtaTransactionManager

  WebLogic 서버의 트랜잭션 서비스를 최대한 활용할 수 있게 해준다. 트랜잭션 이름， 트랜잭션별 격리수준설정， 트랜잭션의 일시중지와 재시작등을모두활용할수 있다. 

  **또 WebLogic 서버의 트랜잭션 모니터를 통해 스프링에서 진행되는 트랜잭션을 관찰할 수 있게 해준다.**

- OC4JJtaTransactionManager

  OC4J 서버의 트랜잭션 기능에 최적화된 트랜잭션 매니저다. 트랜잭션별 격리수준 설정을 지원하며 **OC4J 의 트랜잭션 모니터에서 스프링의 트랜잭션을 볼 수 있게 해준다.** 오라클팀이 만들어서 스프링에 제공한 코드를 바탕으로 만틀어졌다.

위 세 가지 서버를 사용히는 경우라면 JtaTransactionManager 대신 해당 서버 전용 트랜잭션 매니저를 사용하는 편이 좋다. 

**서버에 따라 트랜잭션 매니저의 종류를 변경하 기가 귀찮다면 . JtaTransactionManager 빈을 등록하는 대신 스프링이 제공하는 서버 자동인식 기능을 가진 전용 태그를 시용할 수 있다.**
 &lt;tx:jta-transaction-manager /&gt;

tx 스키마의 jta-transactlon-manager 태그를 이용해 JTA 트랜잭션 매니저를 등록 할수있다. 
**이 방식의장점은서버를자동인식해서 적절한 JTA 트랜잭션을등록해준다는 점이다**. 
이 설정을 가진 애플리케이션을 WebSphere 에 가져가면 WebSphere용 JTA 트랜잭션 매니저가 등록되고.OC4J 에 배치하면 OC4J용 트랜잭션 매니저가 자동등록 된다. 
세 개의 서버 외에 배치됐을 때는 기본인 JtaTransactionManager 가 사용된다.































&lt;/tx:method&gt;&lt;/tx:method&gt;&lt;/tx:method&gt;&lt;/tx:attributes&gt;&lt;/tx:method&gt;&lt;/tx:annotation-driven&gt;&lt;/aop:config&gt;&lt;/tx:attributes&gt;&lt;/Member&gt;&lt;/aop:pointcut&gt;&lt;/aop:config&gt;&lt;/aop:config&gt;&lt;/aop:config&gt;</content><author><name>seongtaekkim</name></author><category term="spring" /><summary type="html">– 토비의스프링 2권 정리 – 토비의스프링2권 2장</summary></entry><entry><title type="html">토비의스프링1권 8장 내용</title><link href="https://seongtaekkim.github.io/spring-toby1_8" rel="alternate" type="text/html" title="토비의스프링1권 8장 내용" /><published>2021-08-19T01:36:01+09:00</published><updated>2021-08-19T01:36:01+09:00</updated><id>https://seongtaekkim.github.io/spring-toby1_8</id><content type="html" xml:base="https://seongtaekkim.github.io/spring-toby1_8">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– 토비의스프링 1권 정리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-toby1_8&quot;&gt;토비의스프링1권 8장&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-toby1_9&quot;&gt;토비의스프링1권 9장&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;84-스프링의-기술&quot;&gt;8.4 스프링의 기술&lt;/h1&gt;

&lt;p&gt;스프링의 목적중 하나는 POJO방식의 애플리케이션 개발을 가능하게 하는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이를 위해 세가지 기술( IoC/DI, AOP, PSA)를  제공한다.&lt;/li&gt;
  &lt;li&gt;세가지 기술을 충분히 잘 사용하면 POJO방식의 개발이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;기술과 비즈니스 로직을 분리하고 POJO 방식의 애플리케이션 개발을 가능하게 한다는 스프링의 목적을 쉽게 이루려면 스프링과 같은 POJO 프레임워크가 필요하다.&lt;/p&gt;

&lt;p&gt;스프링에는 POJO 프로그래밍을 손쉽게 할 수 있도록 지원하는 세 가지 가능기술(enabling technology)을 제공한다.&lt;/p&gt;

&lt;p&gt;앞서 살펴봤던 스프링 삼각형이라는 그림에 나와 있듯이, 엔터프라이즈 개발에서 POJO 개발이 가능하려면 삼각형의 각 변을 이루고 있는 기술들이 뒷받침돼야 한다.&lt;/p&gt;

&lt;p&gt;그 세 가지 기술은 바로 IoC/ DI , AOP, PSA다.&lt;/p&gt;

&lt;p&gt;이 세 가지 모두 스프링이 있기 이전에도 여러 가지 형태로 시도됐고 발전하고 있던 기술이었다.&lt;/p&gt;

&lt;p&gt;사실은 객체지향의 설계와 개발원리를 잘 적용하다 보면 자연스럽게 만들어지는 것이기도 하다.&lt;/p&gt;

&lt;p&gt;다만 스프링은 그것을 통일성 있게, 더 세련된 방법으로, 자바 엔터프라이즈 개발의 전 영역에 걸쳐 효과적으로 적용될 수 있도록 프레임워크 형태로 제공하고있다.&lt;/p&gt;

&lt;p&gt;어떤 개발자는 스프링을 단지 이런 기술을 제공하는 기술 프레임워크로 이해하기도 한다. 스프링은 IoC/DI 컨테이너라거나, AOP 툴이라거나 엔터프라이즈 서비스 추상화PSA를 제공해주는 프레임워크라는 식으로 이해한다는 뜻이다.&lt;/p&gt;

&lt;p&gt;물론 틀린 얘기는 아니 지만 그렇게 스프링을 특정 기술을 지원해주는 단순한 프레임워크로 이해하면 스프링의 목적과 가치를 놓치기 쉽다.&lt;/p&gt;

&lt;p&gt;스프링의 기술들은 스프링 프레임워크가 만들어진 진정한 목표인 POJO 기반의 엔터프라이즈 개발을 편리하게 해주는 도구일 뿐이다. 또 다른 관점에서 보자면 IoC/DI , AOP , PSA 라는 것 자체가 이미 스프링이 중요한 가치를 두는 객체지향의 원리를 충실히 적용해서 나온 결과이기도 하다.&lt;/p&gt;

&lt;p&gt;스프링은 엔터프라이즈 개발에 등장히는 다양한기술에 대해 이미 잘 만들어진 서비스 추상화 기능을 제공하고 있지만, 그렇다고 스프링이 제공하는 PSA만 달랑 사용하고 말라는 뜻은 아니다.&lt;/p&gt;

&lt;p&gt;스프링 사용자라면 스프링이 직접 제공하지 않는 기술에 대해서도 PSA를 적용할 줄 알아야 한다.&lt;/p&gt;

&lt;p&gt;그것이 스프링의 목적과 개발 철학에 부합하는 스프링의 사용법이다. 그래서 스프링의 기술들은 스프링의 목적과 핵심 가치를 기준으로 살펴보고 이해하는 것이 중요하다.&lt;/p&gt;

&lt;h2 id=&quot;841-제어의-역전loc-의존관계-주입di&quot;&gt;8.4.1 제어의 역전(loC)/ 의존관계 주입(DI)&lt;/h2&gt;

&lt;p&gt;DI는 왜 사용하는 걸까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개방폐쇄원칙이라는 객체지향설계원칙에 의하면,&lt;/li&gt;
  &lt;li&gt;DI는 확장에는 열려있고, 변경에는 닫혀있어 유연한 개발이 가능하기 때문에 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IoC/DI 는 스프링의 가장 기본이 되는 기술이자 스프링의 핵심 개발 원칙이기도 하다. 나머지 두 가지 기술인 AOP와 PSA도 IoC/DI 에 바탕을 두고 있다. 3대 기술은 아니지만 자주 등장하는 템플릿/콜백 패턴이 적용된 부분도 IoC/DI가 그 핵심 원리다.&lt;/p&gt;

&lt;p&gt;IoC/ DI 의 기본 원리는 1장에서 충분히 살펴봤으니, 여기서는 IoC/DI 의 활용 방법을 생각해 보자. 이런 질문을 해볼 수 있다. 왜 두 개의 오브젝트를 분리해서 만들고, 인터페이스를 두고 느슨하게 연결한 뒤, 실제 사용할 대상은 DI를 통해 외부에서 지정하는 것일까?&lt;/p&gt;

&lt;p&gt;이렇게 DI 방식으로 하는 것이 그렇지 않은 경우, 즉 직접 자신이 사용할 오브젝트를 new 키워드로 생성해서 사용히는 강한 결합을 쓰는 방법보다 나은 점은 무엇일까?&lt;/p&gt;

&lt;p&gt;가장 간단한 답변은 ‘유연한 확장이 가능하게 하기 위해서’라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;DI는 개방 폐쇄 원칙 OCP 이라는 객체지향 설계 원칙으로 잘 설명될 수 있다. 유연한 확장이라는 장점은 OCP 의 ‘확장’에는 열려 있다(개방)’에 해당한다.&lt;/p&gt;

&lt;p&gt;DI는 역시 OCP 의 ‘변경에는 닫혀 있다(폐쇄)’라는 말로도 설명이 가능하다. 폐쇄 관점에서 볼 때 장점은 ‘재사용이 가능하다’라고볼수있다.&lt;/p&gt;

&lt;p&gt;A→B 라는 의존관계를 갖는 오브젝트 구조라고 생각해보자. 여기서 확장은 B 가 자유롭게 변경될 수 있음을 의미한다. 이는 B 가 변경돼도 A는 아무런 영향을 받지 않고 그대로 유지 가능하다는 뜻이기도 하다.&lt;/p&gt;

&lt;p&gt;B 관점 에 서는 유연한 확장이고 A 관점으로 보자면 변경 없이 재사용이 기능하다고 볼 수 있는 것이다.  B가  B1, B2 ,B3 으로 구현 방법이 바뀌어도 된다고 볼 수도 있고, B1, B2 ,B3 처럼 의존 대상이 바뀌어도 A는 그대로 재사용이 가능하다고 볼 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;di의활용방법&quot;&gt;DI의활용방법&lt;/h3&gt;

&lt;p&gt;개념적인 설명 말고 좀 더 구체적으로 DI 의 활용 방식을 살펴보면서 그 장점을 생각해 보자.&lt;/p&gt;

&lt;h3 id=&quot;1-핵심기능의-변경&quot;&gt;1. 핵심기능의 변경&lt;/h3&gt;

&lt;p&gt;DI 의 가장 대표적인 적용 방법은 바로 의존 대상의 구현을 바꾸는 것이다. 디자인 패턴의 전략 패턴이 대표적인 예다.&lt;/p&gt;

&lt;p&gt;A→B 구조에서 A 의 기능 일부를 B 에게 위임한다고 했을 때 B 의 구현 방식을 필요에 따라 통째로 B1,B2,B3 으로 비꾸는 것이다.&lt;/p&gt;

&lt;p&gt;예를 들어보면 서비스 오브젝트가 사용하는 DAO 가 있다고 할 때, DAO 의 구현을 JDBC로 했다가,   그것을 JPA , 하이버네이트, JDO, iBatis 등으로 변경하는 것을 생각할 수 있다. 구현 방식을 통째로 바꾸는 것이다.&lt;/p&gt;

&lt;p&gt;샤용자 관리 서비스라고 보자면 사용자의 등급을 결정하는 정책을 담은 코드를  DI로 분리할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 비즈니스 로직이 변경돼서 새로운 등급결정 정책을 적용해야 한다면, DI를 이용해 새로운 정책을 담은 클래스로 통째로 변경해주면 된다.&lt;/p&gt;

&lt;p&gt;이렇게 실제 의존하는 대상이 가진 핵심기능을 DI 설정을 통해 변경하는 것이 대표적인 DI의 활용 방법이다. 하지만 이게 다는 아니다.&lt;/p&gt;

&lt;h3 id=&quot;2-핵심기능의-동적인-변경&quot;&gt;2. 핵심기능의 동적인 변경&lt;/h3&gt;

&lt;p&gt;두 번째 활용 방법은 첫 번째랑 비슷하게 의존 오브젝트의 핵심기능 자체를 바꾸는 것이다.               하지만 일반적인 DI를 이용한 변경 방법과는 달리, 동적으로 매번 다르게 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;DI도 기본적으로는 런타임 시에 동적으로 의존 오브젝트를 연결해주는 것이긴 하지만 일단 DI 되고 나면 그 후로는 바뀌지 않는다.&lt;/p&gt;

&lt;p&gt;즉 동적인 방식으로 연결되지만 한번 DI 되면 바뀌지 않는 정적인 관계를 맺어주는 것이다.&lt;/p&gt;

&lt;p&gt;하지만 DI를 잘 활용하면 애플리케이션이 동작하는 중간에 그 의존 대상을 다이내믹하게 변경할수 있다.&lt;/p&gt;

&lt;p&gt;예를 들면 사용자의 등급에 따라서 다른 DataSource를 사용하게 만들 수도 있다.&lt;/p&gt;

&lt;p&gt;DAO는 DataSource에 의존한다. DAO → DataSource 관계가 만들어진다.&lt;/p&gt;

&lt;p&gt;그런데 이를 DAO 하나가 여러 개의 DataSource 에 의존하게 만들 수도 있다.  그리고 현재 접속한 사용자의 등급에 따라서 그때그때 다른 DataSource를 DAO 가 사용하게 할 수도 있다.&lt;/p&gt;

&lt;p&gt;VIP 사용자는 좀 더 속도가 빠른 DB를 이용하게 해서 빠른 처리 속도를 보장해주려고 할 때 적용할 수 있는 기법이다.&lt;/p&gt;

&lt;p&gt;물론 DAO를 따로 만들 필요는 없다. 대신 매우 지능적인 방식으로 동작하는 DI 덕분에 선택적으로 사용할 Data Source를 바꿔주는 기법이 가능하다.&lt;/p&gt;

&lt;p&gt;또 다른 예를생각해보면 사용자별로 모두 독립적인 의존오브젝트를 두게 만들수도 있다.&lt;/p&gt;

&lt;p&gt;한번 로그인한 사용자는 로그아웃하거나 다른 브라우저로 다시 들어오기 전에는 계속 자신만의 오브젝트를 유지하게 하고 서비스 오브젝트가 이를 DI 받아서 사용하게 할 수 있다. 이때는 핵심기능이 바뀐다기보다는 기능은 같지만 독립적인 상태 정보를 저장할 수 있는 자신만의 오브젝트를 가질 수 있다는 뜻이다. 매번 요청이 있을 때마다 새로운 오브젝트가 필요하다면 new를 이용해 새로 만들어도 그만이겠지만， 한번 로그인한 사용자에게는 계속 같은 오브젝트가 적용되려면 DI를 이용하는 이 방식이 가장편리하다.&lt;/p&gt;

&lt;p&gt;동적인 방식으로 핵심기능을 변경하는 건, 기술적으로 보자면 다이내믹 라우팅 프록시나 프록시 오브젝트 기법을 활용한 것이다. 그런 기법을 적용할 수 있었던 이유는 역시 DI가 있기 때문이다.&lt;/p&gt;

&lt;p&gt;DI 없이는 불가능하다. DI의 원칙은 여전히 지켜지므로 확장과 재사용이라는 장점은 손상되지 않고오히려 더 가치를 드러낸다.&lt;/p&gt;

&lt;h3 id=&quot;3-부가기능의추가&quot;&gt;3. 부가기능의추가&lt;/h3&gt;

&lt;p&gt;DI 의 세 번째 활용 방법은 핵심기능은 그대로 둔 채로 부가기능을 추가하는 것이다.&lt;/p&gt;

&lt;p&gt;데코레이터 패턴을 생각해보면 된다. 인터페이스를 두고 사용하게 하고, 실제 사용할 오브젝트는 외부에서 주입하는 DI를 적용해두면  데코레이터 패턴을 쉽게 적용할수 있다.&lt;/p&gt;

&lt;p&gt;그래서 핵심기능과 클라이언트 코드에는 전혀 영향을 주지 않으면서 부가적인 기능을 얼마든지 추가할수 있다.&lt;/p&gt;

&lt;p&gt;트랜잭션 기능을 부여했던 것이 그 대표적인 예다.  때로는 핵심기능은 그대로 둔채로 결과나 전달 파라미터를 조작할 수도 있고, 파라미터나 리턴 결과를 활용해 로깅이나 보안 처리 같은 부가적인 작업을 수행할 수도 있다.&lt;/p&gt;

&lt;p&gt;부가기능이라기보다는 부가작업이라고 본다면 이벤트 발생 작업의 추가같은 것도 생각해볼수 있다. 부가 기능의 추가 방식을 특정 오브젝트가 아니라 좀 더 많은 대상으로 일반화해서 적용하면 AOP가된다.&lt;/p&gt;

&lt;p&gt;부가기능을 추가할 수 있는 것도 바로 DI 덕분이다. DI 구조로 만들어놨기 때문에 가능한 것이며 DI의 핵심 원칙인 OCP 에도 충실하게 잘 들어맞는다.&lt;/p&gt;

&lt;p&gt;OCP 가 말하는 확장에 열려 있다는 것은 전략패턴에서처럼 핵심기능을 변경해서 쓰는 수준만을 말하는게아님을기억해야한다.&lt;/p&gt;

&lt;h3 id=&quot;4-인터페이스의변경&quot;&gt;4. 인터페이스의변경&lt;/h3&gt;

&lt;p&gt;때로는 사용하려고 하는 오브젝트가 가진 인터페이스가 클라이언트와 호환되지 않는 경우가 있다. 또는 여러 종류의 인터페이스를 가졌지만 사실은 비슷한 기능을 담당하는 오브젝트를 바꿔가면서 사용하고 싶을 때도 있다.&lt;/p&gt;

&lt;p&gt;이렇게 클라이언트가 사용하는 인터페이스와 실제 오브젝트 사이에 인터페이스가 일치하지 않는 경우에도 DI가 유용하다.&lt;/p&gt;

&lt;p&gt;A가 C 오브젝트를 사용하려 한다고 해보자. 하지만 A는 원래 B 인터페이스를 사용하도록 만들어져 있고 C는 B인터페이스를 구현하지 않았다. 이때 A가 DI를 통해 B의 구현 오브젝트를 받도록 만들어져 있다면 B인터페이스를 구현했으면서 내부에서 C를 호출해주는 기능을 가진 어댑터 오브젝트를 만들어 A에  DI해주면 된다.&lt;/p&gt;

&lt;p&gt;220V 전기를 원하는 9V, 6V, 12V 식으로 바꿔주는 어댑터처럼, 인터페이스가 다른 오브젝트를 클라이언트가 사용히는 인터페이스로 바꿔주는 기능을 이용하면 되는 것이다.&lt;/p&gt;

&lt;p&gt;A→B (c로 위임) → C 처럼 구성된다. 여전히 A는 DI덕분에 자신의 코드를 수정하지 않아도 된다. 이처럼 인터페이스가 일치하지 않는 호출이 필요한 경우에도 DI는 유용하다.&lt;/p&gt;

&lt;p&gt;디자인 패턴에서 말하는 오브젝트 방식의 어댑터 패턴의 응용이라고 볼수있다.&lt;/p&gt;

&lt;p&gt;이를 좀 더 일반화해서 아예 인터페이스가 다른 다양한 구현을 같은 방식으로 사용하도록, 중간에 인터페이스 어댑터 역할을 해주는 레이어를 하나 추가하는 방법도 있다. DI의 응용 방법 중 하나이자 스프링의 대표적인 기술로도 분류되는 일관성 있는 서비스추상회 PSA가 그런 방법이다.&lt;/p&gt;

&lt;p&gt;PSA는 클라이언트가 일관성 있게 사용할 수있는 인터페이스를 정의해주고  DI를 통해 어댑터 역할을 하는 오브젝트를 이용하게 해준다. 이를 통해서 다른 인터페이스를 가진 로우레벨의 기술을 변경하거나 확장해 가면서 사용할수 있는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;어댑터-패턴-예제&quot;&gt;어댑터 패턴 예제&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;220v로 동작하는 전자기기를 어댑터를 통해서 110v에서 동작하도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/204d32a9-c7ea-4308-bb47-0a371aa30fd9/Untitled.png&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/204d32a9-c7ea-4308-bb47-0a371aa30fd9/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;110v로동작하는 헤어드라이어와 220v로 동작하는 에어컨을 정의한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Electronic110V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;powerOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Electronic220V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;conect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HairDryer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Electronic110V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;powerOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;헤어드라이어 110v on&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AirConditioner&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Electronic220V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;에어컨디셔너 220v&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;220v의 에어컨을 110v에서 동작할수 있도록 어뎁터를 생성해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SocketAdapter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Electronic110V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Electronic220V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;electronic220V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SocketAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Electronic220V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;electronic220V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;electronic220V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;electronic220V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;powerOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;electronic220V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;110v를 상속받았으나, 실제로는 220v로 객체를생성하여 함수를 수행함.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;HairDryer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hairDryer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HairDryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hairDryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 220v를 110v로 변환.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AirConditioner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airConditioner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AirConditioner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Electronic110V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SocketAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;airConditioner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;airAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 110v 콘센트&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Electronic110V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;electronic110V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;electronic110V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;powerOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;110v를 실행하기 위해 adapter를 이용하여 220v 전자기기를  켤 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-프록시&quot;&gt;5. 프록시&lt;/h3&gt;

&lt;p&gt;프록시 패턴의 전형적인 응용 방법도 있다. 필요한 시점에서 실제 사용할 오브젝트를 초기화하고 리소스를 준비하게 해주는 지연된 로딩 lazy loading을 적용하려면 프록시가 필요하다.&lt;/p&gt;

&lt;p&gt;원격 오브젝트를 호출할 때 마치 로컬에 존재하는 오브젝트처럼 사용할 수 있게 해주는 원격 프록시를 적용하려고 할 때도 프록시가 필요하다.&lt;/p&gt;

&lt;p&gt;두 가지 방법 모두 DI를 필요로한다. 스프링은 EJB 원격 호출을 포함해서 웹 서비스, REST호출,  HTTP 방식의 호출 등 다양한 리모팅 기술을 지원한다. 당연히 모두 DI를 통해 이뤄진다.&lt;/p&gt;

&lt;h3 id=&quot;6-템플릿과-콜백&quot;&gt;6. 템플릿과 콜백&lt;/h3&gt;

&lt;p&gt;탬플릿/콜백 패턴은 DI의 특별한 적용 방법이다. 반복적으로 등장하지만 항상 고정 적인 작업 흐름과 그 사이에서 자주 바뀌는 부분을 분리해서 탬플릿과 콜백으로 만들고 이를 DI 원리를 응용해 적용하면 지저분하게 매번 만들어야 히는 코드를 간결하게 만틀 수 있다.&lt;/p&gt;

&lt;p&gt;스프링이 제공하는 20여 가지의 템플릿/콜백이 적용된 기능을 가져다 활용하는 것뿐 아니라 필요에 따라서는 DI 원리를 따라 직접 응용할 수 있어야 한다. 콜백을 템플릿에 주입하는 방식으로 동작하게 히는 것은 DI의 원리에 가장 충실한 응용 방법이다.&lt;/p&gt;

&lt;p&gt;콜백을 얼마든지 만들어서 사용할 수 있다는 건 개방을 통한 유연한 확장성을 보여주는 것이며,       템플릿은 한 번 만들어두면 계속 재사용할 수 있다는 건 기능의 확장에도 변하지 않는다는 OCP 의 폐쇄 원칙에 가장 잘 들어맞는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;7-싱글톤과-오브젝트-스코프&quot;&gt;7. 싱글톤과 오브젝트 스코프&lt;/h3&gt;

&lt;p&gt;DI 가 필요한 중요한 이유 중 한 가지는 DI할 오브젝트의 생명주기를 제어할 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;DI를 프레임워크로 이용한다는 건 DI 대상 오브젝트를 컨테이너가 관리한다는 의미다.&lt;/p&gt;

&lt;p&gt;오브젝트의 생성부터 관계설정, 이용,소멸에 이르기까지의 모든 과정을 DI컨테이너가 주관하기 때문에 그 오브젝트의 스코프를 자유롭게 제어할 수있다.&lt;/p&gt;

&lt;p&gt;가장 기본이 되는 스코프는 역시 싱글톤이다. 하나 또는 소수의 오브젝트가 수많은 클라이언트를 상대로 고성능 서비스를 제공하는 방식은 엔터프라이즈 개발에서 매우 중요하다.&lt;/p&gt;

&lt;p&gt;상태를 갖지 않도록 만든 오브젝트가 동시에 여러 스레드의 요청을 처리하는 이런 방식을 적용하려면 만들어지는 오브젝트의 개수를 제어히는 일이 매우 중요하다.&lt;/p&gt;

&lt;p&gt;전통적인 싱글톤 패턴은 오브젝트에 많은 제약을 가해서 만들어지기 때문에 그다지 권장되지 않는다.&lt;/p&gt;

&lt;p&gt;그보다는 컨테이너가 오브젝트를 관리하는 IoC 방식이 유용하다. 스프링의 DI는 기본적으로 싱글톤으로 오브젝트를 만들어서 사용하게 한다. 컨테이너가 알아서 싱글톤을 만들고 관리하기 때문에 클래스 자체는 싱글 톤을 고려하지 않고 자유롭게 설계해도 된다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;때론 단일 싱글톤이 아니라 임의의 생명주기를 갖는 오브젝트가 필요할 때도 있다.&lt;/p&gt;

&lt;p&gt;스프링에서는 싱글톤 외에도 다양한 스코프를 갖는 오브젝트를 만들어 DI 에 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;HTTP 요청당 하나의 오브젝트가 만들어지거나, HTTP 세션당 하나씩 오브젝트가 만들어지게 할 수 있다.&lt;/p&gt;

&lt;p&gt;개발자 스스로 일정한 스코프를 갖는 오브젝트를 만들고 이를 DI 에 적용하는 것도 가능하다.&lt;/p&gt;

&lt;p&gt;이렇게 오브젝트 스코프를 제어하는 방법 또한 DI를 적용했기 때문에 가능한 활용방법이다.&lt;/p&gt;

&lt;h3 id=&quot;8-테스트&quot;&gt;8. 테스트&lt;/h3&gt;

&lt;p&gt;마지막으로 살펴볼 DI 의 중요한 용도는 바로 테스트다.&lt;/p&gt;

&lt;p&gt;여타 오브젝트와 협력해서 동작하는 오브젝트를 효과적으로 테스트하는 방법은 가능한 한 고립시키는 것이다.&lt;/p&gt;

&lt;p&gt;즉 다른 오브젝트와의 사이에서 일어나는 일을 테스트를 위해 조작할 수 있도록 만든다.&lt;/p&gt;

&lt;p&gt;그래야만 테스트 대상인 오브젝트의 기능에 충실하게 테스트가 기능하다. 자칫 다른 오브젝트와의 협력을 통해 동작하는 기능을 다 허용하고 테스트하다가는 한번에 수십 개의 오브젝트와 DB 환경까지 모두 테스트해야 하는 부담을 안을 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 태스트할 대상이 의존하는 오브젝트를, 테스트를 목적으로 만들어진 목오브젝트로 대체하면 유용하다.&lt;/p&gt;

&lt;p&gt;복잡한 테스트 데이터가 준비되어 있어야 원히는 결과를 가져올 수 있는 DAO를 사용히는 오브젝트가 있다고 해보자. DAO를 이용하는 서비스 오브젝트를 태스트하기 위해서 DAO도 완벽하게 작성되어 있음을 먼저 확인해야 하고. DAO 가 테스트를 위해 적합한 결괴를 돌려주도록, 필요한 테스트 데이터까지 모두 준비해야 한다면 배보다 배꼽이 더 큰 일이 되기 십상이다.&lt;/p&gt;

&lt;p&gt;정작 원하는 것은 십여 줄밖에 안 되는 조건에 따라 다르게 동작하는 서비스 오브젝트 코드인 데， 테스트를 준비하면서 DAO와 테스트 데이터 때문에 너무 많은 시간을 쏟아야 한다면 곤란하다.&lt;/p&gt;

&lt;p&gt;그래서는 테스트 만드는 게 짐이 되고 태스트를 사용하기가 점점 꺼려질것이다.&lt;/p&gt;

&lt;p&gt;그래서 의존 오브젝트를 대신해서 스텁 또는 목 오브젝트 같은 테스트 대역을 활용해야 한다. 이때도 DI 는 중요한 역할을 한다. DI를 위해 만든 수정자 메소드를 사용하면 테스트 코드 안에서 수동으로 목 오브젝트를 주입할 수 있다. 또는 테스트용 으로 설정을 별도로 만드는 방법도 있다. DI없이는 이런 테스트 기법을 적용하기란 불가능하다.&lt;/p&gt;

&lt;p&gt;갈수록 테스트의 중요성이 커져가고 있으니 DI의 활용 방법에서 테스트가 차지하는 비중도 커질 것이다.&lt;/p&gt;

&lt;p&gt;그 외에도 DI의 활용 방법은 다양하다. 이 정도만 살펴봐도 런타임 시 유연하게 구현을 비꿀 수 있다는 DI라는 개념이 실전에서 얼마나 활용도가 다양한지 알 수 있을 것이다. 잘 살펴보면 DI 의 용도는 디자인 패턴 중에서 오브젝트 합성 방식을 따르는 패턴과 관련이 있음을 알수 있다. GoF 의 디자인 패턴 중에서 인터페이스를두고 오브젝트를 분리히는 구조를 가진 오브젝트 스코프의 패턴은 DI 의 구조에 대부분 잘 들어맞는다. 그런 패턴의 장점들을 애플리케이션 전 영역에서 간단한 설정만으로 자연스럽게 적용할 수 있게 만들어주는 것이 바로 DI 다.&lt;/p&gt;

&lt;p&gt;이런 활용 방법은 한 번에 한 가지만 선택적으로 사용해야 하는 건 아니다. 여러 가지 활용 방법을 한 번에 적용할 수도 있다. 예를 들변 하나의 DI 대신에 대해 핵심기능도 업무 변화에 따라 바꾸면서， 부가기능도 여러 개 추가해넣고， 테스트에서도 활용하는 식으로 사용해도 된다.&lt;/p&gt;

&lt;h2 id=&quot;842-애스펙트-지향-프로그래밍aop&quot;&gt;8.4.2 애스펙트 지향 프로그래밍(AOP)&lt;/h2&gt;

&lt;p&gt;애스펙트 지향 프로그래밍이라고 많이 알려진 AOP도 스프링의 3 대 가능기술의 하나다.&lt;/p&gt;

&lt;p&gt;계속해서 스프링은 객체지향 기술과 프로그래밍을 위해 존재하는 프레임워크라고 설명했는데,      난데없이 애스펙트 지향 프로그래밍이라는 새로운 프로그래밍 패러다임이왜 필요할까?                  사실 애스펙트 지향 프로그래밍은 객체지향 프로그래밍 OOP처럼 독립적인 프로그래밍 패러다임이 아니다.  AOP와 OOP는 서로 배타적이 아니라는말이다.&lt;/p&gt;

&lt;p&gt;객체지향 기술은 매우 성공적인 프로그래밍 방식임에 분명하다. 하지만 한편으로는 점점 복잡해져 가는 애플리케이션의 요구조건과 기술적인 난해함을 모두 해결하는데 한계가 있기도 하다.&lt;/p&gt;

&lt;p&gt;AOP는 바로 이러한 객체지향 기술의 한계와 단점을 극복하도록 도와주는 보조적인 프로그래밍 기술이다. AOP를 사용하면 그 결과로 OOP를 더욱 OOP 답게 만들 수 있다. AOP는 90년대부터 연구됐고, 여러 가지 제품으로도 나왔지만 이를 가장 성공적으로 엔터프라이즈 개발에 보급한 것이 바로 스프링이다.&lt;/p&gt;

&lt;p&gt;스프링의 목적인. POJO 만으로 엔터프라이즈 애플리케이션을 개발하면서도 엔터프라이즈 서비스를 선언적으로 제공하는 데 반드시 필요한 것이 바로 이 AOP 기술이다. IoC /DI 를 이용해서 POJO 에 선언적인 엔터프라이즈 서비스를 제공할 수 있지만 일부 서비스는 순수한 객체지향 기법만으로는 POJO 의 조건을 유지한 채로 적용하기 힘들다. 바로 이런 문제를 해결하기 위해 AOP가 필요하다.&lt;/p&gt;

&lt;p&gt;스프링의 AOP는 스프링이 POJO 프로그래밍을 지원하려는 그 핵심 목적을 위해 중요한 역할을 하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;aop의적용기법&quot;&gt;AOP의적용기법&lt;/h3&gt;

&lt;p&gt;AOP를 자바 언어에 적용하는 기법은 크게 두 가지로 분류할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;첫-번째는-스프링과-같이-다이내믹-프록시룰-사용하는-방법이다&quot;&gt;첫 번째는 스프링과 같이 다이내믹 프록시룰 사용하는 방법이다&lt;/h3&gt;

&lt;p&gt;이 방법은 기존 코드에 영향을 주지 않고 부가기능을 적용하게 해주는 데코레이터 패턴을 응용한 것이다.&lt;/p&gt;

&lt;p&gt;자바의 객체지향 패턴을 활용한 방법이기 때문에 만들기 쉽고 적용하기 간펀하다. 대신 부가기능을 부여할 수 있는 곳은 메소드의 호출이 일어 나는지점 뿐이라는 제약이 있다. 인터페이스와 DI를활용하는 데코레이터 패턴이 기반원리이기 때문이다. 부가기능을 구현한 코드나 기능을 적용할 대상을 찾는 방법 모두 평범한 자바 클래스로 만들면 된다.&lt;/p&gt;

&lt;p&gt;스프링의 기본적인 AOP 구현 방법은 다이내믹 프록시를 이용하는 프록시 AOP 방식이다. 엔터프라이즈개발에서 필요로 하는 AOP는 대부분이 이 프록시 방식의 AOP면 된다.&lt;/p&gt;

&lt;h3 id=&quot;두-번째는-자바-언어의-한계를-넘어서는-언어의-확장을-이용하는-방법이다&quot;&gt;두 번째는 자바 언어의 한계를 넘어서는 언어의 확장을 이용하는 방법이다&lt;/h3&gt;

&lt;p&gt;AspectJ라는 유명한 오픈소스 AOP 툴이 있다.&lt;/p&gt;

&lt;p&gt;이 AspectJ는 강력한 고급 기능을 가진 AOP를 제공한다. AspectJ는 프록시 방식의 AOP 에서는 불가능한 다양한 조인 포인트를 제공한다.&lt;/p&gt;

&lt;p&gt;메소드 호출뿐 아니라 인스턴스 생성 , 필드 액세스, 특정 호출 경로를 가진 메소드 호출 등에도 부가기능을 제공할 수 있다. 이런 고급 AOP 기능을 적용하려면 자바 언어와 JDK의 지원만으로는 불가능하다.&lt;/p&gt;

&lt;p&gt;그 대신 별도의 AOP 컴파일러를 이용한 빌드 과정을 거치거나, 클래스가 메모리로 로딩될 때 그 바이트 코드를 조작히는 위빙과 같은 별도의 방법을 이용해야 한다.&lt;/p&gt;

&lt;p&gt;그만큼 사용하기 까다 롭고 번잡하지만 경우에 따라서는 프록시 방식의 AOP로는 할 수 없는 작업을 위해 AspectJ를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;스프링은 프록시 방식의 AOP를 기본으로 하고 있지만, 원한다면 AspectJ를 이용한 AOP로 바꿔서 사용할 수 있다. 스프링의 특별한 기능 중에는 AspectJ를 꼭 사용해야 하는것도있다.&lt;/p&gt;

&lt;h3 id=&quot;aop의적용단계&quot;&gt;AOP의적용단계&lt;/h3&gt;

&lt;p&gt;AOP 가 객체지향 개발 방법에서 기본 아이디어를 가져왔다고는 하지만 본격적으로 적용하기에는 그 성격이 자바의 일반적인 개발 방법과는 상당히 다르기 때문에 제대로 적용하려면 충분한 시간과 노력이 필요하다.&lt;/p&gt;

&lt;p&gt;또 AOP 의 장점이 많다고 해서 무작정 사용 하면 심각한 문제가 발생할 위험이 있다. 개발자 개개인이 아무렇게나 AOP를 남발해서 사용하다 보면 다른 개발자가 만든 코드가 예상하지 않은 방식으로 돌아가는 등의 혼란을 초래할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;AOP는 하나의 모듈이 수많은 오브젝트에 보이지 않게 적용되기 때문에 매우 주의해서 사용해야 한다. AOP 에 익숙하지 않은 상태라면 차근차근 단계를 밟아 AOP를 도입히는 접근 방법 이좋다 .&lt;/p&gt;

&lt;h3 id=&quot;aop-적용-1-단계-미리-준비된-aop-이용&quot;&gt;AOP 적용 1 단계: 미리 준비된 AOP 이용&lt;/h3&gt;

&lt;p&gt;일단 처음에는 스프링이 미리 만들어서 제공히는 AOP 기능을 그대로 가져다 적용하는 것으로 시작한다. 스프링이 직접 제공하는 대표적인 AOP는 바로 트랜잭션이다.&lt;/p&gt;

&lt;p&gt;DB를 사용하는 애플리케이션이라면 트랜잭션이 필요할테니 이 트랜잭션 적용을 스프링 AOP 도입의 첫 번째 단계로 이용한다. AOP 설정을 통해서 트랜잭션이 어떻게 많은 오브젝트에 투명하게 적용되는지 관찰해보고, AOP 의 특성과 동작원리를 이해해보자.&lt;/p&gt;

&lt;p&gt;스프링에는 트랜잭션만큼 자주 사용되진 않지만 특정 아키텍처를 선택했을 때 사용할 수 있도록 준비된 AOP 기능이 하나 더 있다. @Configurable 애노태이션을 이용해서 도메인 오브젝트에 DI 를 자동적용해주는 AOP 기능이다. 도메인 오브젝트를 전용 계층에 두고 접근하는 아키텍처 방식을 따를 때 반드시 필요하다.&lt;/p&gt;

&lt;p&gt;프록시 AOP면 충분한 트랜잭션과 달리, @Configurable을 위해서는 AspectJ를 이용한 AOP가 반드시필요하다.&lt;/p&gt;

&lt;p&gt;이 두가지가 스프링이 미리 준비해서 제공히는대표적인 AOP 기능이다. 두가지 모두 간단한 설정을 추가하는 것만으로도 쉽게 적용되기 때문에 AOP 에 대한 지식이나 경험이 많지 않더라도 간단히   이용 가능하다는 장점이 있다.&lt;/p&gt;

&lt;h3 id=&quot;aop-적용-2단계--전담팀올-통한-정책-aop-적용&quot;&gt;AOP 적용 2단계 : 전담팀올 통한 정책 AOP 적용&lt;/h3&gt;

&lt;p&gt;다음 단계는 좀 더 적극적으로 AOP를 적용할 차례다.&lt;/p&gt;

&lt;p&gt;아직까지는 개발자 개개인이 AOP 기능을 직접 이용하게 해서는 안 된다. 대신 애플리케이션 전체적으로 이용 가능한 것을 소수의 AOP 담당자 관리하에 적용해볼 수 있다.&lt;/p&gt;

&lt;p&gt;대표적으로 비즈니스 로직을 가진 오브젝트에 대한 보안, 특정 계층의 오브젝트 이용 전후의 작업 기록을 남기는로깅, 데이터 추적을 위한 트레이싱, 특정 구간의 실시간 성능모니터링과 같은 정책적으로 적용할 만한 기능에 AOP를 이용하는 것이다.&lt;/p&gt;

&lt;p&gt;이런 기능을 개발자가 직접 자신이 만드는 코드에 추가하려면, 개발 표준이나 가이드라인이 미리 완벽하게 준비되어 있어서 이를 따라 개발하게 해야 한다.&lt;/p&gt;

&lt;p&gt;하지만 개발자가 실수로 빼 먹을 수도 있고, 가이드라인을 제대로 따르지 못하고 엉뚱하게 적용할 수도 있다. 더 큰 문제는 개발 정책이나 기준이 바뀌면 모든 개발자가 지금까지 작업한 것을 모두 수정하고 일일이 검증해야 하는 큰 부담을 지게 된다.&lt;/p&gt;

&lt;p&gt;하지만 이런 일을 AOP를 이용해 한번에 적용한다면 일반 개발자의 작업에는 전혀 영향을 주지 않을 수 있다.  AOP를 책임지는 소수의 팀만 수고하면 그만이다.&lt;/p&gt;

&lt;p&gt;또한 AOP는 언제든지 기능을 추가하거나 제거할 수 있다. 기존 코드에는 당연히 아무런 영향을 주지 않으면서 말이다. 이런 특정을 잘 이용하면 운영 중에 필요한 기능 외에 개발 가이드라인이나 표준을 따라서 코드가 작성되어 있는지를 검증하는 작업을 AOP를 이용해 할 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들면 레이어 간의 호출에 대한 제한이 있다고 생각해보자. JSP 뷰에서는 DAO나 서비스 계층의 오브젝트를 직접 호출하면 안 된다는 정책이 있다.&lt;/p&gt;

&lt;p&gt;하지만 개발자는 곧잘 이런 기준을 무시하고 제멋대로 짜기 일쑤 다. 이런 것을 코드리뷰를 통해      일일이 검증하기는쉽지 않다.&lt;/p&gt;

&lt;p&gt;이럴 때 AOP가유용 하게 쓰일 수 있다. 모든 DAO 의 메소드 호출에 적용되는 AOP 모듈을 하나 만든다. 그리고 메소드 호출이 일어났을 때 어드바이스를 통해 호출 경로를 조사할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 서비스 계층 같은 허용된 계층으로부터의 호출이 아니라면 정책위반 예외를 던지게 할 수 있다. 또 서비스 계층에서 던질 수 있는 예외의 종류가 정해져 있다고 해보자. 그런데 개발자가 임의의 예외를 만들거나 선택해서 마구 사용할 수도 있다. 이런 경우라면 서비스 계층의 메소드에 대해 예외가 던져졌을 때만 동작히는 AOP 모률을 만들 수 있다. 그리고 그 안에서 예외의 종류를 검사해서 허용된 게 아니면 역시 정책위반 예외를 만들어서 던지고 관리자에게 통보가 가도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 AOP는 동적으로 동작하면서 개발 정책을 위반한 코드를 잡아내는 데도 유용하다.&lt;/p&gt;

&lt;p&gt;물론 개발이 끝나고 실전에 적용할 때는 정책 검증을 위한 AOP 설정을 간단히 제거 해버리면된다 .&lt;/p&gt;

&lt;h3 id=&quot;aop-적용-3단계--aop의-자유로운-이용&quot;&gt;AOP 적용 3단계 : AOP의 자유로운 이용&lt;/h3&gt;

&lt;p&gt;첫 번째와 두 번째 단계를 거쳐서 AOP 에 어느 정도 친숙해지고, 그 장단점과 응용 전략, 위험성 등을 어느 정도 이해했다면 이제는 개발자 스스로가 AOP를 활용할 수있는 단계로 넘어갈 수 있다.&lt;/p&gt;

&lt;p&gt;이전 단계에서는 애플리케이션 전체적으로 적용되는 정책 AOP를 위주로 했다면 이제는 개발자가  구현하는 기능에 적용하면 유용한 세부 적인 AOP를 이용할 수 있다. 큰 범위에 걸쳐서 적용되는 기능은 아니지만 한 모듈 또는 특정 기능 안에서도 AOP 로 분리하면 유용한 것들이 있다.&lt;/p&gt;

&lt;p&gt;물론 다른 팀이나 개발자가 만든 코드에 몰래 적용되는 AOP 기능은 만들어선 안 된다. 그런 위험만 주의한다면 얼마든지 개발자가 자신이 다루는 코드에 AOP를 적극 활용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;843-포터블-서비스-추상화psa&quot;&gt;8.4.3 포터블 서비스 추상화(PSA)&lt;/h2&gt;

&lt;p&gt;세 번째 가능기술은 환경과 세부 기술의 변회에 관계없이 일관된 방식으로 기술에 접근 할 수 있게 해주는 PSA (Portable Service Abstraction) 이다.&lt;/p&gt;

&lt;p&gt;POJO로 개발된 코드는 특정 환경이나 구현 방식에 종속적이지 않아야 한다. 스프링은 JavaEE를 기본 플랫폼으로 히는 자바 엔터프라이즈 개발에 주로 사용된다.&lt;/p&gt;

&lt;p&gt;따라서 다양한 JavaEE 기술에 의존적일 수밖에 없다. 특정 환경과 기술에 종속적이지 않다는게 그런 기술을 사용하지 않는다는 뜻은 아니다.&lt;/p&gt;

&lt;p&gt;다만 POJO 코드가 그런 기술에 직접 노출되어 만들어지지 않는다는 말이다.&lt;/p&gt;

&lt;p&gt;이를 위해 스프링이 제공히는 대표적인 기술이 바로 일관성 있는 서비스 추상화 기술이다.&lt;/p&gt;

&lt;p&gt;스프링은 엔터프라이즈 개발에 사용되는 다양한 기술에 대한 서비스 추상화 기능을 제공한다. 어떤 것은 AOP 나 템플릿/콜백 패턴과 결합돼서 시용되기 때문에 직접적으로 서비스를 이용할 필요가 없다.&lt;/p&gt;

&lt;p&gt;대신 설정을 통해 어떤 종류의 기술을 사용할지 지정 해줘야한다.&lt;/p&gt;

&lt;p&gt;트랜잭션 서비스 추상화는 코드를 이용해 트랜잭션을 제어하지 않는다면 직접 이용할 이유가 없다.&lt;/p&gt;

&lt;p&gt;트랜잭션은 대부분 AOP 를 이용해 적용하기 때문에 직접 코드를 만들지 않기 때문이다.&lt;/p&gt;

&lt;p&gt;대신 설정에서는 스프링의 트랜잭션 추상화 인터페이스인 PlatformTransactionManager를 구현한 구체적인 서비스 클래스를 빈으로 등록해줘야 한다.&lt;/p&gt;

&lt;p&gt;JTA를 이용해 트랜잭션을 적용하고 싶다변 JtaTransactionManager를 빈으로 등록하고 JTA 환경에 대한 설정을 프로퍼티로 넣어주면 된다.&lt;/p&gt;

&lt;p&gt;직접 스프링이 제공하는 API 를 사용해서 만드는 경우도 있다.OXM 이나 JavaMail 을 이용한다면 스프링이 정의한 추상 API 를 이용해 코드를 작성한다. 그리고 구체적인 기술과 설정은 XML 파일 안에서 지정한다.&lt;/p&gt;

&lt;p&gt;스프링의 서비스 추상화의 개념과 장점을 잘 이해한다면 때에 따라 직접 서비스 추상화 기법을 적용할 필요도 있다.&lt;/p&gt;

&lt;p&gt;엔터프라이즈 개발에 사용되는 기술은 끊임없이 쏟아져 나온다. 표준 기술뿐 아니라 오픈소스 라이브러리, 상용 프레임워크 형태로도 하루가 멀다 하고 새로운 기술이 등장한다.&lt;/p&gt;

&lt;p&gt;보편적으로 사용되는 기술이라면 아마도 다음 버전의 스프링에서 서비스 추상화 대상으로 포함시킬 가능성이 있다.&lt;/p&gt;

&lt;p&gt;하지만 그것을 굳이 기다려야 할 이유는 없다.  필요하면 스프링이 그랬던 것처럼 직접 추상 레이어를 도입하고 일관성 있는 API를 정의해서 사용하면 된다.&lt;/p&gt;

&lt;p&gt;서비스 추상화를 위해 필요한 기술은 DI 뿐이다. 결국 DI 응용 방법의 한 가지이므로 DI 를 적극 활용해서 개발한다면 서비스 추상화는 자연스럽게 만들어 쓸 수 있다. 서비스 추상회는 단지 구체적인 기술에 종속되지 않게 하기 위해서만 사용되는 건 아니다.&lt;/p&gt;

&lt;p&gt;테스트가 어렵게 만들어진 API 나 설정을 통해 주요 기능을 외부에서 제어하게 만들고 싶을 때도 이용할 수 있다.&lt;/p&gt;</content><author><name>seongtaekkim</name></author><category term="spring" /><summary type="html">– 토비의스프링 1권 정리 토비의스프링1권 8장 토비의스프링1권 9장</summary></entry><entry><title type="html">토비의스프링1권 9장</title><link href="https://seongtaekkim.github.io/spring-toby1_9-summary" rel="alternate" type="text/html" title="토비의스프링1권 9장" /><published>2021-08-18T01:36:01+09:00</published><updated>2021-08-18T01:36:01+09:00</updated><id>https://seongtaekkim.github.io/spring-toby1_9-summary</id><content type="html" xml:base="https://seongtaekkim.github.io/spring-toby1_9-summary">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;– 토비의스프링 1권 정리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-toby1_8&quot;&gt;토비의스프링1권 8장&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-toby1_9&quot;&gt;토비의스프링1권 9장&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;가나다라마바사&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syntaxHighlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>seongtaekkim</name></author><category term="spring" /><summary type="html">– 토비의스프링 1권 정리 토비의스프링1권 8장 토비의스프링1권 9장</summary></entry></feed>